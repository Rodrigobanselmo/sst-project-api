import { ProtocolToRiskEntity } from './protocol.entity';
import { HierarchyEntity } from '../../company/entities/hierarchy.entity';
import { HomoGroupEntity } from '../../company/entities/homoGroup.entity';
import { EpiEntity } from './epi.entity';
import { GenerateSourceEntity } from './generateSource.entity';
import { RecMedEntity } from './recMed.entity';
import { RiskFactorsEntity } from './risk.entity';
import { Prisma, RiskFactorData } from '.prisma/client';
import { RiskDataRecEntity } from './riskDataRec.entity';
import { EpiRiskDataEntity } from './epiRiskData.entity';
import { EngsRiskDataEntity } from './engsRiskData.entity';
import { ExamRiskDataEntity } from './examRiskData.entity';
import { ExamEntity } from './exam.entity';
export declare class RiskFactorDataEntity implements RiskFactorData {
    id: string;
    probability: number;
    probabilityAfter: number;
    companyId: string;
    created_at: Date;
    deleted_at: Date | null;
    hierarchy?: HierarchyEntity;
    hierarchyId: string;
    homogeneousGroup?: HomoGroupEntity;
    homogeneousGroupId: string;
    riskFactor?: RiskFactorsEntity;
    riskId: string;
    riskFactorGroupDataId: string;
    recs?: RecMedEntity[];
    engs?: RecMedEntity[];
    adms?: RecMedEntity[];
    generateSources?: GenerateSourceEntity[];
    epis?: EpiEntity[];
    exams?: ExamEntity[];
    dataRecs?: RiskDataRecEntity[];
    level: number;
    json: Prisma.JsonValue;
    isQuantity?: boolean;
    ibtugLEO?: number;
    ibtug?: number;
    probAren?: number;
    probVdvr?: number;
    origin?: string;
    ro?: string;
    intensity?: number;
    vdvrValue?: number;
    arenValue?: number;
    prioritization?: number;
    intervention?: string;
    progress?: number;
    epiToRiskFactorData?: EpiRiskDataEntity[];
    engsToRiskFactorData?: EngsRiskDataEntity[];
    examsToRiskFactorData?: ExamRiskDataEntity[];
    standardExams: boolean;
    endDate: Date;
    startDate: Date;
    deletedAt: Date;
    protocolsToRisk: ProtocolToRiskEntity[];
    constructor(partial: Partial<RiskFactorDataEntity>);
    private getBaseExams;
    private getProtocols;
    private setRecMedExamData;
    private getMatrix;
    private getOrigin;
    private quiProb;
    private noiseProb;
    private vibProb;
    private vibLProb;
    private radProb;
    private heatProb;
    private percentageCheck;
    private valuesCheck;
    private mapCheck;
    private convertNum;
}
