import { WorkspaceEntity } from './../../../../../company/entities/workspace.entity';
import { Paragraph, Table } from 'docx';
import { RiskDocumentEntity } from '../../../../../sst/entities/riskDocument.entity';
import { HierarchyMapData, IHierarchyMap, IHomoGroupMap } from '../../../converter/hierarchy.converter';
import { ISectionChildrenType } from '../types/elements.types';
import { IDocVariables } from '../types/section.types';
import { AttachmentEntity } from '../../../../../sst/entities/attachment.entity';
import { RiskFactorGroupDataEntity } from '../../../../../sst/entities/riskGroupData.entity';
import { CharacterizationEntity } from './../../../../../company/entities/characterization.entity';
import { EnvironmentEntity } from './../../../../../company/entities/environment.entity';
import { ProfessionalEntity } from './../../../../../users/entities/professional.entity';
import { UserEntity } from './../../../../../users/entities/user.entity';
export declare type IMapElementDocumentType = Record<string, (arg: ISectionChildrenType) => (Paragraph | Table)[]>;
declare type IDocumentClassType = {
    variables: IDocVariables;
    versions: RiskDocumentEntity[];
    professionals: (ProfessionalEntity | UserEntity)[];
    environments: EnvironmentEntity[];
    document: RiskFactorGroupDataEntity;
    homogeneousGroup: IHomoGroupMap;
    hierarchy: Map<string, HierarchyMapData>;
    characterizations: CharacterizationEntity[];
    attachments: AttachmentEntity[];
    workspace: WorkspaceEntity;
    hierarchyTree: IHierarchyMap;
};
export declare class ElementsMapClass {
    private variables;
    private versions;
    private workspace;
    private professionals;
    private environments;
    private characterizations;
    private document;
    private attachments;
    private homogeneousGroup;
    private hierarchy;
    private hierarchyTree;
    constructor({ variables, versions, professionals, characterizations, environments, document, homogeneousGroup, hierarchy, attachments, hierarchyTree, workspace, }: IDocumentClassType);
    map: IMapElementDocumentType;
    private convertToDocx;
}
export {};
