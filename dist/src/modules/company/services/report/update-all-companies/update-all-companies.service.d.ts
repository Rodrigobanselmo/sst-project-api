import { UpsertCompanyReportDto } from './../../../dto/company-report.dto';
import { EmployeeEntity } from '../../../../../modules/company/entities/employee.entity';
import { CompanyEntity } from './../../../entities/company.entity';
import { CompanyRepository } from '../../../repositories/implementations/CompanyRepository';
import { FindExamByHierarchyService } from '../../../../sst/services/exam/find-by-hierarchy /find-exam-by-hierarchy.service';
import { EmployeeRepository } from '../../../repositories/implementations/EmployeeRepository';
import { DayJSProvider } from '../../../../../shared/providers/DateProvider/implementations/DayJSProvider';
import { UserPayloadDto } from '../../../../../shared/dto/user-payload.dto';
import { TelegramService } from 'nestjs-telegram';
import { CompanyReportRepository } from '../../../../../modules/company/repositories/implementations/CompanyReportRepository';
import { ESocialEventProvider } from '../../../../../shared/providers/ESocialProvider/implementations/ESocialEventProvider';
import { UpdateESocialReportService } from '../update-esocial-report/update-esocial-report.service';
export declare class UpdateAllCompaniesService {
    private readonly employeeRepository;
    private readonly findExamByHierarchyService;
    private readonly companyRepository;
    private readonly dayjs;
    private readonly telegram;
    private readonly eSocialEventProvider;
    private readonly companyReportRepository;
    private readonly updateESocialReportService;
    private chatId;
    private standardDate;
    private errorCompanies;
    private error;
    constructor(employeeRepository: EmployeeRepository, findExamByHierarchyService: FindExamByHierarchyService, companyRepository: CompanyRepository, dayjs: DayJSProvider, telegram: TelegramService, eSocialEventProvider: ESocialEventProvider, companyReportRepository: CompanyReportRepository, updateESocialReportService: UpdateESocialReportService);
    execute(user?: UserPayloadDto): Promise<UpsertCompanyReportDto[]>;
    addReport(company: CompanyEntity): Promise<{
        examTime: {
            company: CompanyEntity;
            all: {
                expiredDateExamOld: Date;
                id: number;
                name: string;
                cpf: string;
                status: import(".prisma/client").StatusEnum;
                companyId: string;
                created_at: Date;
                updated_at: Date;
                hierarchyId: string;
                workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
                hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
                subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
                directory?: string;
                management?: string;
                sector?: string;
                sub_sector?: string;
                office?: string;
                sub_office?: string;
                esocialCode: string;
                socialName: string;
                nickname: string;
                phone: string;
                email: string;
                isComorbidity: boolean;
                sex: import(".prisma/client").SexTypeEnum;
                cidId: string;
                shiftId: number;
                birthday: Date;
                admissionDate: Date;
                lastExam: Date;
                expiredDateExam: Date;
                company?: CompanyEntity;
                examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
                hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
                pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
            }[];
            allWithExam: EmployeeEntity[];
            allWithExamExpired: EmployeeEntity[];
            allWithExamSchedule: EmployeeEntity[];
            allWithMissingExam: EmployeeEntity[];
            missingExamExpired: ({
                expiredDate: Date;
                id: number;
                name: string;
                cpf: string;
                status: import(".prisma/client").StatusEnum;
                companyId: string;
                created_at: Date;
                updated_at: Date;
                hierarchyId: string;
                workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
                hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
                subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
                directory?: string;
                management?: string;
                sector?: string;
                sub_sector?: string;
                office?: string;
                sub_office?: string;
                esocialCode: string;
                socialName: string;
                nickname: string;
                phone: string;
                email: string;
                isComorbidity: boolean;
                sex: import(".prisma/client").SexTypeEnum;
                cidId: string;
                shiftId: number;
                birthday: Date;
                admissionDate: Date;
                lastExam: Date;
                expiredDateExam: Date;
                company?: CompanyEntity;
                examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
                hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
                pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
            } | {
                expiredDate?: undefined;
                id: number;
                name: string;
                cpf: string;
                status: import(".prisma/client").StatusEnum;
                companyId: string;
                created_at: Date;
                updated_at: Date;
                hierarchyId: string;
                workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
                hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
                subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
                directory?: string;
                management?: string;
                sector?: string;
                sub_sector?: string;
                office?: string;
                sub_office?: string;
                esocialCode: string;
                socialName: string;
                nickname: string;
                phone: string;
                email: string;
                isComorbidity: boolean;
                sex: import(".prisma/client").SexTypeEnum;
                cidId: string;
                shiftId: number;
                birthday: Date;
                admissionDate: Date;
                lastExam: Date;
                expiredDateExam: Date;
                company?: CompanyEntity;
                examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
                hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
                pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
            })[];
            closeToExpire30: {
                expiredDateExamOld: Date;
                id: number;
                name: string;
                cpf: string;
                status: import(".prisma/client").StatusEnum;
                companyId: string;
                created_at: Date;
                updated_at: Date;
                hierarchyId: string;
                workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
                hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
                subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
                directory?: string;
                management?: string;
                sector?: string;
                sub_sector?: string;
                office?: string;
                sub_office?: string;
                esocialCode: string;
                socialName: string;
                nickname: string;
                phone: string;
                email: string;
                isComorbidity: boolean;
                sex: import(".prisma/client").SexTypeEnum;
                cidId: string;
                shiftId: number;
                birthday: Date;
                admissionDate: Date;
                lastExam: Date;
                expiredDateExam: Date;
                company?: CompanyEntity;
                examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
                hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
                pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
            }[];
            closeToExpire90: {
                expiredDateExamOld: Date;
                id: number;
                name: string;
                cpf: string;
                status: import(".prisma/client").StatusEnum;
                companyId: string;
                created_at: Date;
                updated_at: Date;
                hierarchyId: string;
                workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
                hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
                subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
                directory?: string;
                management?: string;
                sector?: string;
                sub_sector?: string;
                office?: string;
                sub_office?: string;
                esocialCode: string;
                socialName: string;
                nickname: string;
                phone: string;
                email: string;
                isComorbidity: boolean;
                sex: import(".prisma/client").SexTypeEnum;
                cidId: string;
                shiftId: number;
                birthday: Date;
                admissionDate: Date;
                lastExam: Date;
                expiredDateExam: Date;
                company?: CompanyEntity;
                examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
                hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
                pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
            }[];
        };
        esocialEvents: import("./../../../dto/company-report.dto").IESocialPropsDto;
        company: CompanyEntity;
    }>;
    addEmployeeExamTime(company: CompanyEntity): Promise<{
        company: CompanyEntity;
        all: {
            expiredDateExamOld: Date;
            id: number;
            name: string;
            cpf: string;
            status: import(".prisma/client").StatusEnum;
            companyId: string;
            created_at: Date;
            updated_at: Date;
            hierarchyId: string;
            workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
            hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
            subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
            directory?: string;
            management?: string;
            sector?: string;
            sub_sector?: string;
            office?: string;
            sub_office?: string;
            esocialCode: string;
            socialName: string;
            nickname: string;
            phone: string;
            email: string;
            isComorbidity: boolean;
            sex: import(".prisma/client").SexTypeEnum;
            cidId: string;
            shiftId: number;
            birthday: Date;
            admissionDate: Date;
            lastExam: Date;
            expiredDateExam: Date;
            company?: CompanyEntity;
            examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
            hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
            pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
        }[];
        allWithExam: EmployeeEntity[];
        allWithExamExpired: EmployeeEntity[];
        allWithExamSchedule: EmployeeEntity[];
        allWithMissingExam: EmployeeEntity[];
        missingExamExpired: ({
            expiredDate: Date;
            id: number;
            name: string;
            cpf: string;
            status: import(".prisma/client").StatusEnum;
            companyId: string;
            created_at: Date;
            updated_at: Date;
            hierarchyId: string;
            workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
            hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
            subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
            directory?: string;
            management?: string;
            sector?: string;
            sub_sector?: string;
            office?: string;
            sub_office?: string;
            esocialCode: string;
            socialName: string;
            nickname: string;
            phone: string;
            email: string;
            isComorbidity: boolean;
            sex: import(".prisma/client").SexTypeEnum;
            cidId: string;
            shiftId: number;
            birthday: Date;
            admissionDate: Date;
            lastExam: Date;
            expiredDateExam: Date;
            company?: CompanyEntity;
            examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
            hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
            pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
        } | {
            expiredDate?: undefined;
            id: number;
            name: string;
            cpf: string;
            status: import(".prisma/client").StatusEnum;
            companyId: string;
            created_at: Date;
            updated_at: Date;
            hierarchyId: string;
            workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
            hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
            subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
            directory?: string;
            management?: string;
            sector?: string;
            sub_sector?: string;
            office?: string;
            sub_office?: string;
            esocialCode: string;
            socialName: string;
            nickname: string;
            phone: string;
            email: string;
            isComorbidity: boolean;
            sex: import(".prisma/client").SexTypeEnum;
            cidId: string;
            shiftId: number;
            birthday: Date;
            admissionDate: Date;
            lastExam: Date;
            expiredDateExam: Date;
            company?: CompanyEntity;
            examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
            hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
            pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
        })[];
        closeToExpire30: {
            expiredDateExamOld: Date;
            id: number;
            name: string;
            cpf: string;
            status: import(".prisma/client").StatusEnum;
            companyId: string;
            created_at: Date;
            updated_at: Date;
            hierarchyId: string;
            workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
            hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
            subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
            directory?: string;
            management?: string;
            sector?: string;
            sub_sector?: string;
            office?: string;
            sub_office?: string;
            esocialCode: string;
            socialName: string;
            nickname: string;
            phone: string;
            email: string;
            isComorbidity: boolean;
            sex: import(".prisma/client").SexTypeEnum;
            cidId: string;
            shiftId: number;
            birthday: Date;
            admissionDate: Date;
            lastExam: Date;
            expiredDateExam: Date;
            company?: CompanyEntity;
            examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
            hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
            pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
        }[];
        closeToExpire90: {
            expiredDateExamOld: Date;
            id: number;
            name: string;
            cpf: string;
            status: import(".prisma/client").StatusEnum;
            companyId: string;
            created_at: Date;
            updated_at: Date;
            hierarchyId: string;
            workspaces?: import("../../../entities/workspace.entity").WorkspaceEntity[];
            hierarchy?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>;
            subOffices?: Partial<import("../../../entities/hierarchy.entity").HierarchyEntity>[];
            directory?: string;
            management?: string;
            sector?: string;
            sub_sector?: string;
            office?: string;
            sub_office?: string;
            esocialCode: string;
            socialName: string;
            nickname: string;
            phone: string;
            email: string;
            isComorbidity: boolean;
            sex: import(".prisma/client").SexTypeEnum;
            cidId: string;
            shiftId: number;
            birthday: Date;
            admissionDate: Date;
            lastExam: Date;
            expiredDateExam: Date;
            company?: CompanyEntity;
            examsHistory?: import("../../../entities/employee-exam-history.entity").EmployeeExamsHistoryEntity[];
            hierarchyHistory?: import("../../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
            pppHistory?: import("../../../entities/employee-ppp-history.entity").EmployeePPPHistoryEntity[];
        }[];
    }>;
    addCompanyEsocial(company: CompanyEntity): Promise<import("./../../../dto/company-report.dto").IESocialPropsDto>;
    telegramMessage(allCompanies: CompanyEntity[]): Promise<void>;
}
