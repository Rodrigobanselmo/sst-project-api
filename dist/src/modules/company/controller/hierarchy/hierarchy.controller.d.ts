import { UserPayloadDto } from '../../../../shared/dto/user-payload.dto';
import { CreateHierarchyDto, CreateSubHierarchyDto, UpdateHierarchyDto, UpdateSimpleManyHierarchyDto, UpsertManyHierarchyDto } from '../../dto/hierarchy';
import { CreateHierarchyService } from '../../services/hierarchy/create-hierarchies/create-hierarchies.service';
import { CreateSubHierarchyService } from '../../services/hierarchy/create-sub-hierarchies/create-sub-hierarchies.service';
import { DeleteHierarchyService } from '../../services/hierarchy/delete-hierarchies/delete-hierarchies.service';
import { FindAllHierarchyService } from '../../services/hierarchy/find-all-hierarchies/find-all-hierarchies.service';
import { FindHierarchyService } from '../../services/hierarchy/find-hierarchy/find-hierarchy.service';
import { UpdateHierarchyService } from '../../services/hierarchy/update-hierarchies/update-hierarchies.service';
import { UpdateSimpleManyHierarchyService } from '../../services/hierarchy/update-simple-many-hierarchies /upsert-many-hierarchies.service';
import { UpsertManyHierarchyService } from '../../services/hierarchy/upsert-many-hierarchies/upsert-many-hierarchies.service';
export declare class HierarchyController {
    private readonly findAllHierarchyService;
    private readonly createHierarchyService;
    private readonly updateHierarchyService;
    private readonly upsertManyHierarchyService;
    private readonly deleteHierarchyService;
    private readonly findHierarchyService;
    private readonly updateSimpleManyHierarchyService;
    private readonly createSubHierarchyService;
    constructor(findAllHierarchyService: FindAllHierarchyService, createHierarchyService: CreateHierarchyService, updateHierarchyService: UpdateHierarchyService, upsertManyHierarchyService: UpsertManyHierarchyService, deleteHierarchyService: DeleteHierarchyService, findHierarchyService: FindHierarchyService, updateSimpleManyHierarchyService: UpdateSimpleManyHierarchyService, createSubHierarchyService: CreateSubHierarchyService);
    findAllAvailable(userPayloadDto: UserPayloadDto): Promise<import("../../entities/hierarchy.entity").HierarchyEntity[]>;
    findById(id: string, userPayloadDto: UserPayloadDto): Promise<import("../../entities/hierarchy.entity").HierarchyEntity>;
    create(createHierarchyDto: CreateHierarchyDto, userPayloadDto: UserPayloadDto): Promise<import("../../entities/hierarchy.entity").HierarchyEntity>;
    update(updateHierarchyDto: UpdateHierarchyDto, id: string, userPayloadDto: UserPayloadDto): Promise<import("../../entities/hierarchy.entity").HierarchyEntity>;
    upsertMany(upsertManyHierarchyDto: UpsertManyHierarchyDto, userPayloadDto: UserPayloadDto): Promise<import("../../entities/hierarchy.entity").HierarchyEntity[]>;
    updateSimpleMany(upsertManyHierarchyDto: UpdateSimpleManyHierarchyDto, userPayloadDto: UserPayloadDto): Promise<import("../../entities/hierarchy.entity").HierarchyEntity[]>;
    delete(id: string, userPayloadDto: UserPayloadDto): Promise<void>;
    upsert(createSubHierarchyDto: CreateSubHierarchyDto, userPayloadDto: UserPayloadDto): Promise<{
        workspaceIds: string[];
        id: string;
        name: string;
        description: string;
        realDescription: string;
        status: import(".prisma/client").StatusEnum;
        companyId: string;
        created_at: Date;
        type: import(".prisma/client").HierarchyEnum;
        parentId: string;
        workspaces?: import("../../entities/workspace.entity").WorkspaceEntity[];
        hierarchyOnHomogeneous?: import("../../entities/homoGroup.entity").HierarchyOnHomogeneousEntity[];
        homogeneousGroups?: import("../../entities/homoGroup.entity").HomoGroupEntity[];
        employees?: import("../../entities/employee.entity").EmployeeEntity[];
        subOfficeEmployees?: import("../../entities/employee.entity").EmployeeEntity[];
        parent?: import(".prisma/client").Hierarchy;
        parents?: import("../../entities/hierarchy.entity").HierarchyEntity[];
        children?: import(".prisma/client").Hierarchy[];
        workspaceId?: string;
        employeesCount?: number;
        deletedAt: Date;
        subHierarchyHistory?: import("../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
        hierarchyHistory?: import("../../entities/employee-hierarchy-history.entity").EmployeeHierarchyHistoryEntity[];
        refName: string;
    }>;
}
