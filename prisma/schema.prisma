// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  refresh_token RefreshToken[]
  companies UserCompany[]
}

model UserCompany {
  roles String[]
  permissions String[]
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  companyId Int
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  
  @@id([companyId, userId])
}

model RefreshToken {
  id   String @id @default(uuid())
  refresh_token String
  expires_date DateTime
  created_at DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model InviteUsers {
  id   String @id @default(uuid())
  expires_date DateTime
  companyId Int
  email String 
  roles String[]
  permissions String[]
}

model Company {
  id    Int     @default(autoincrement()) @id
  cnpj String
  name String  
  fantasy String
  status String
  type String
  isConsulting Boolean @default(false)
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  users UserCompany[]
  workspace Workspace[]
  primary_activity Activity[] @relation(name: "primary_activity")
  secondary_activity Activity[] @relation(name: "secondary_activity")
  employees Employee[] 
  childCompany RelatedCompanies[]  @relation(name: "childCompany")
  parentCompany RelatedCompanies[] @relation(name: "parentCompany")
}

model RelatedCompanies {
  parentCompany   Company @relation(name: "parentCompany",fields: [parentCompanyId], references: [id])
  parentCompanyId Int 
  childCompany   Company @relation(name: "childCompany",fields: [childCompanyId], references: [id])
  childCompanyId Int 
  status String
  created_at DateTime @default(now())
 
  @@id([parentCompanyId, childCompanyId])
}
 
model Activity {
  id    Int     @default(autoincrement()) @id
  code String @unique
  name String
  created_at DateTime @default(now())
  company_primary_activity Company[] @relation(name: "primary_activity")
  company_secondary_activity Company[] @relation(name: "secondary_activity")
} 

model Workspace {
  id    Int     @default(autoincrement()) @id
  name String  
  status String
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  companyId Int
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  address Address?
}

model Address {
  id    Int     @default(autoincrement()) @id
  cep String 
  street String?
  number String?
  complement String?
  neighborhood String?
  city String
  state String
  workspaceId Int
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Employee {
  id    Int     @default(autoincrement()) @id
  status String 
  name String 
  cpf Int 
  created_at DateTime @default(now())
  companyId Int
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
} 