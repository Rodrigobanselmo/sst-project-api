generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CharacterizationTypeEnum {
  WORKSTATION
  EQUIPMENT
  ACTIVITIES
  GENERAL
  SUPPORT
  OPERATION
  ADMINISTRATIVE
}

enum ClinicScheduleTypeEnum {
  PHONE
  EMAIL
  ONLINE
  ASK
  NONE
}

enum CompanyPaymentTypeEnum {
  ANTICIPATED
  DEBIT
}

enum CompanyTypesEnum {
  MATRIZ
  FILIAL
  MASTER
}

enum CompanyEnvironmentTypesEnum {
  GENERAL
  SUPPORT
  OPERATION
  ADMINISTRATIVE
}

enum CoverTypeEnum {
  PGR
  PCSMO
}

enum ExamTypeEnum {
  LAB
  AUDIO
  VISUAL
  OTHERS
}

enum EmployeeHierarchyMotiveTypeEnum {
  ADM
  TRANS
  ALOC
  PROM
  TRANS_PROM
  DEM
}

enum ExamHistoryTypeEnum {
  ADMI
  PERI
  RETU
  CHAN
  EVAL
  DEMI
  OFFI
}

enum ExamHistoryEvaluationEnum {
  NONE
  APTO
  INAPT
  INCONCLUSIVE
}

enum ExamHistoryConclusionEnum {
  NORMAL
  ALTER
  ALTER_1
  ALTER_2
  ALTER_3
  NONE
}

enum HierarchyEnum {
  DIRECTORY 
  MANAGEMENT
  SECTOR
  SUB_SECTOR
  OFFICE
  SUB_OFFICE
}

enum HomoTypeEnum {
  HIERARCHY
  ENVIRONMENT
  WORKSTATION
  EQUIPMENT
  ACTIVITIES
}

enum MeasuresTypeEnum {
  ADM
  ENG
}

enum SexTypeEnum {
  M
  F
}

enum StatusEnum {
  ACTIVE
  PROGRESS
  INACTIVE
  PENDING
  PROCESSING
  EXPIRED
  VALID
  INVALID
  ERROR
  CANCELED
  DONE
}

enum RecTypeEnum {
  ADM
  ENG
  EPI
}

enum RiskFactorsEnum {
  FIS
  QUI
  BIO 
  ERG
  ACI
  OUTROS
}

enum RiskRecTypeEnum {
  CANCELED
  POSTPONED
  DONE
}

enum RiskRecTextTypeEnum {
  MONEY
  TECHNIQUE
  LOGISTICS
  OTHER
}

enum ProfessionalTypeEnum {
  DOCTOR
  NURSE
  SPEECH_THERAPIST
  TECHNICIAN
  ENGINEER
  USER
  OTHER
}
// START TABLES

model AccessGroups {
  id    Int     @default(autoincrement()) @id
  roles String[]
  permissions String[]
  name String  
  description String?  
  companyId String  
  system Boolean @default(false)  
  users UserCompany[]
  invites InviteUsers[]
  company Company? @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade) 

  @@unique([id, companyId])
} 

model Activity {
  id    Int     @default(autoincrement()) @id
  code String @unique
  name String
  riskDegree Int @default(0)
  created_at DateTime @default(now())
  company_primary_activity Company[] @relation(name: "primary_activity")
  company_secondary_activity Company[] @relation(name: "secondary_activity")
}

model Address {
  id   String    @id @default(uuid())
  companyId String
  cep String 
  street String?
  number String?
  complement String?
  neighborhood String?
  city String?
  state String?
  workspaceId String?
  workspace Workspace? @relation(fields: [id,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)
  
  @@unique([workspaceId, companyId])
  @@unique([id,companyId])
  @@index(companyId)
}

model AddressCompany {
  id   String    @id @default(uuid())
  cep String 
  street String?
  number String?
  complement String?
  neighborhood String?
  city String?
  state String?
  companyId String @unique
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Attachments {
  id   String    @id @default(uuid())
  name String?  
  url String
  created_at DateTime @default(now())
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  riskFactorDocumentId String?
  riskFactorDocument RiskFactorDocument? @relation(fields: [riskFactorDocumentId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
}

model Checklist {
  id    Int     @default(autoincrement())
  status StatusEnum @default(PROGRESS)
  name String 
  companyId String
  system Boolean
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  data ChecklistData?
  created_at DateTime @default(now())

  @@id([id, companyId])
} 

model ChecklistData {
  json Json
  companyId String
  checklistId    Int  
  checklist Checklist @relation(fields: [checklistId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)

  @@id([checklistId, companyId])
} 

model Cid {
  cid String @id 
  description   String?
  employees Employee[] 
} 

model Company {
  id   String    @id @default(uuid())
  cnpj String?
  name String  
  shortName String?
  fantasy String?
  description String?
  isConsulting Boolean @default(false)
  isClinic Boolean @default(false)
  isGroup Boolean @default(false)
  licenseId Int? 
  groupId Int? 
  phone String?
  email String?
  operationTime String?
  logoUrl String?
  responsibleName String?
  responsibleNit String?
  responsibleCpf String?
  numAsos Int?
  blockResignationExam Boolean @default(true)
  esocialStart  DateTime?
  initials String?
  unit String?
  obs String?
  activityStartDate DateTime? 
  created_at DateTime @default(now())
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  doctorResponsibleId  Int?
  tecResponsibleId  Int?
  status StatusEnum @default(ACTIVE)
  type CompanyTypesEnum @default(MATRIZ)
  accessGroups AccessGroups[]
  address AddressCompany?
  paymentType CompanyPaymentTypeEnum?
  paymentDay Int?
  isTaxNote Boolean @default(false)
  observationBank String?
  applyingServiceContracts Contract[]  @relation(name: "contracts")
  characterization CompanyCharacterization[] 
  checklist Checklist[] 
  companyGroups CompanyGroup[] @relation(name:"company")
  databaseTable DatabaseTable[] 
  employees Employee[] 
  environments CompanyEnvironment[] 
  generateSource GenerateSource[] 
  group CompanyGroup? @relation(name:"group", fields: [groupId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  hierarchy Hierarchy[] 
  homogeneousGroup HomogeneousGroup[] 
  invites InviteUsers[] 
  license License? @relation(name:"license",fields: [licenseId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  primary_activity Activity[] @relation(name: "primary_activity")
  professionals Professional[] //! will be removed doc not working
  receivingServiceContracts Contract[]
  recMed RecMed[] 
  exams Exam[] 
  examsToRisk ExamToRisk[] 
  clinicExams ExamToClinic[] 
  riskFactorData RiskFactorData[] 
  riskFactorDataRec RiskFactorDataRec[] 
  riskFactorDocument RiskFactorDocument[] 
  riskFactorGroupData RiskFactorGroupData[] 
  riskFactors RiskFactors[] 
  secondary_activity Activity[] @relation(name: "secondary_activity")
  users UserCompany[]
  workspace Workspace[]
  contacts Contact[]
  shifts CompanyShift[]
  covers DocumentCover[]
  doctorResponsible  Professional? @relation(name:"doctors_company_responsibles", fields: [doctorResponsibleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tecResponsible  Professional? @relation(name:"tec_company_responsibles", fields: [tecResponsibleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  clinicsAvailable CompanyClinics[]  @relation(name: "companies_available")
  companiesToClinicAvailable CompanyClinics[]  @relation(name: "clinics_available")
  examClinicHistory EmployeeExamsHistory[]  
  riskDocInfo RiskFactorsDocInfo[]
  companyGroupId Int? @unique
  companyGroup CompanyGroup? @relation(name:"company_group", fields: [companyGroupId], references: [id], onDelete: Restrict, onUpdate: Cascade) 

  // professionals Professional[] @relation(name:"companies_related") 
  stateRegistration String? // not in use
  size String? // not in use
  legal_nature String? // not in use
  cadastral_situation String? // not in use
  activity_start_date String? // not in use
  cadastral_situation_date String? // not in use
  legal_nature_code String? // not in use
  cadastral_situation_description String? // not in use

  mission String?
  vision String?
  values String?
 
  @@index(name)
  @@index(isClinic)
  @@index(isConsulting)
  @@index(initials)
  @@index(fantasy)
  @@index(cnpj)
}

model CompanyClinics {
  company   Company @relation(name: "companies_available",fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  clinic  Company @relation(name: "clinics_available", fields: [clinicId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  companyId String 
  clinicId String 
  created_at DateTime @default(now())
 
  @@id([companyId, clinicId])
}

model CompanyGroup {
  id    Int   @id  @default(autoincrement())
  name String  
  description String?
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  companies Company[] @relation(name:"group") 
  companyId String
  company Company @relation(name:"company", fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  numAsos Int?
  blockResignationExam Boolean @default(true)
  esocialStart  DateTime?
  doctorResponsibleId  Int?
  doctorResponsible  Professional? @relation(name:"doctors_group_responsibles", fields: [doctorResponsibleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  
  companyGroup Company? @relation(name:"company_group") 

  @@unique([id, companyId])
}

model CompanyCharacterization {
  id   String    @id @default(uuid())
  name String  
  photos CompanyCharacterizationPhoto[]
  description String?
  created_at DateTime @default(now())
  paragraphs String[]
  considerations String[]
  activities String[]  
  profiles CompanyCharacterization[]  @relation(name:"profiles") 
  profileName String?  
  profileParent CompanyCharacterization? @relation(name:"profiles", fields: [profileParentId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  profileParentId String?
  order Int?
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  type CharacterizationTypeEnum
  noiseValue String?  
  temperature String?  
  luminosity String?  
  moisturePercentage String?   
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  homogeneousGroup HomogeneousGroup? @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  
  @@unique([workspaceId, companyId, id])
}

model CompanyCharacterizationPhoto {
  id   String    @id @default(uuid())
  name String  
  isVertical Boolean @default(false)
  photoUrl String
  created_at DateTime @default(now())
  order Int?
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  companyCharacterizationId String
  companyEnvironment CompanyCharacterization @relation(fields: [companyCharacterizationId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
}

model CompanyEnvironment {
  id   String    @id @default(uuid())
  name String  
  photos CompanyEnvironmentPhoto[]
  description String?
  paragraphs String[]
  order Int?
  considerations String[]
  activities String[]  
  created_at DateTime @default(now())
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  type CompanyEnvironmentTypesEnum 
  noiseValue String?  
  temperature String?  
  luminosity String?  
  moisturePercentage String?   
  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  parentEnvironmentId String?
  parentEnvironment CompanyEnvironment? @relation(name: "parent_enviroment",fields: [parentEnvironmentId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  childEnvironments CompanyEnvironment[] @relation(name: "parent_enviroment")
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  homogeneousGroup HomogeneousGroup? @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  
  @@unique([workspaceId, companyId, id])
}

model CompanyEnvironmentPhoto {
  id   String    @id @default(uuid())
  name String  
  isVertical Boolean @default(false)
  order Int?
  photoUrl String
  created_at DateTime @default(now())
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  companyEnvironmentId String
  companyEnvironment CompanyEnvironment @relation(fields: [companyEnvironmentId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
}

model CompanyShift {
  id    Int   @id  @default(autoincrement())
  name String  
  description String?
  companyId String
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  employees Employee[]

  @@unique([id, companyId])
}

model Contact {
  id    Int   @id  @default(autoincrement())
  name String? 
  phone String? 
  phone_1 String? 
  email String? 
  isPrincipal Boolean @default(false)
  obs String? 
  companyId String 
  updated_at  DateTime   @updatedAt
  company   Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())

  @@unique([id, companyId])
}

model Contract {
  receivingServiceCompany   Company @relation(fields: [receivingServiceCompanyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  applyingServiceCompany  Company @relation(name: "contracts", fields: [applyingServiceCompanyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  applyingServiceCompanyId String 
  receivingServiceCompanyId String 
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
 
  @@id([applyingServiceCompanyId, receivingServiceCompanyId])
}

model DatabaseTable {
  id    Int     @default(autoincrement())
  name String 
  version Int  @default(1)
  companyId String
  system Boolean
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt

  @@id([id, companyId])
} 

model DocumentCover {
  id    Int   @id  @default(autoincrement())
  name String?
  json Json
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  acceptType CoverTypeEnum[]  

  @@unique([id, companyId])
}

model Employee {
  id    Int   @id  @default(autoincrement())
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  status StatusEnum @default(PENDING)
  name String 
  cpf String 
  esocialCode String?
  socialName String?
  nickname String?
  phone String?
  email String?
  isComorbidity Boolean? @default(false)
  birthday DateTime?
  admissionDate DateTime? //!remove
  sex SexTypeEnum? 
  hierarchyId String?
  hierarchy Hierarchy? @relation(fields: [hierarchyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  cidId String?
  cid Cid? @relation(fields: [cidId], references: [cid], onDelete: Restrict, onUpdate: Cascade)
  shiftId Int?
  shift CompanyShift? @relation(fields: [shiftId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  subOffices Hierarchy[] @relation(name: "sub_offices")
  hierarchyHistory EmployeeHierarchyHistory[]
  examsHistory EmployeeExamsHistory[]
  
  @@unique([id, companyId])
  @@unique([cpf, companyId])
  @@index([cpf], type: Hash)
  @@index(esocialCode)
  @@index(name)
  @@index(email)
} 

model EmployeeHierarchyHistory {
  id    Int   @id  @default(autoincrement())
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  motive EmployeeHierarchyMotiveTypeEnum
  startDate DateTime?
  hierarchyId String
  hierarchy Hierarchy @relation(fields: [hierarchyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  employeeId Int
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
} 

model EmployeeExamsHistory {
  id    Int   @id  @default(autoincrement())
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  
  doneDate DateTime?
  time String?
  validityInMonths Int?
  expiredDate DateTime?
  examType ExamHistoryTypeEnum?
  evaluationType ExamHistoryEvaluationEnum?
  conclusion ExamHistoryConclusionEnum?
  status StatusEnum @default(DONE)
  
  obs String?
  clinicObs String?
  scheduleType ClinicScheduleTypeEnum?
  changeHierarchyDate DateTime?
  changeHierarchyAnyway Boolean @default(false)
  hierarchyId String?
  hierarchy Hierarchy? @relation(fields: [hierarchyId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  userScheduleId Int?
  userSchedule User? @relation(name: "user_schedule", fields: [userScheduleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userDoneId Int?
  userDone User? @relation(name: "user_done", fields: [userDoneId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  doctorId Int?
  doctor Professional? @relation(fields: [doctorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  clinicId String?
  clinic Company? @relation(fields: [clinicId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  examId Int
  exam Exam @relation(fields: [examId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  employeeId Int
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index(status)
  @@index(employeeId)
  @@index(clinicId)
} 

model EngsToRiskFactorData {
  recMedId    String   @map("A") 
  riskFactorDataId String @map("B") 
  riskFactorData RiskFactorData  @relation(fields: [riskFactorDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recMed RecMed  @relation(fields: [recMedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  efficientlyCheck Boolean @default(false)
  startDate DateTime?
  endDate DateTime?

  @@id([riskFactorDataId, recMedId])
  @@map("_engs")
} 

model Epi {
  id    Int     @default(autoincrement()) @id
  ca String
  isValid Boolean?  
  national Boolean @default(true)
  expiredDate DateTime?
  description String @default("")
  report String @default("")
  restriction String @default("")
  observation String @default("")
  equipment String @default("")
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
  deleted_at DateTime? 
  epiToRiskFactorData EpiToRiskFactorData[]

  @@index(ca)
  @@unique([ca, status])
} 

model EpiToRiskFactorData {
  epiId    Int   @map("A") 
  riskFactorDataId String @map("B") 
  riskFactorData RiskFactorData  @relation(fields: [riskFactorDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  epi Epi  @relation(fields: [epiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lifeTimeInDays Int?
  efficientlyCheck Boolean @default(false)
  epcCheck Boolean @default(false)
  longPeriodsCheck Boolean @default(false)
  validationCheck Boolean @default(false)
  tradeSignCheck Boolean @default(false)
  sanitationCheck Boolean @default(false)
  maintenanceCheck Boolean @default(false)
  unstoppedCheck Boolean @default(false)
  trainingCheck Boolean @default(false)
  startDate DateTime?
  endDate DateTime?

  @@id([riskFactorDataId, epiId])
  @@map("_EpiToRiskFactorData")
} 

model Exam {
  id    Int   @id  @default(autoincrement())
  name String
  analyses String? 
  instruction String? 
  material String? 
  companyId String 
  status StatusEnum @default(ACTIVE)
  type ExamTypeEnum?
  isAttendance Boolean @default(false)
  updated_at  DateTime   @updatedAt
  created_at DateTime @default(now())
  deleted_at DateTime?
  company   Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  system Boolean @default(false)
  examToRisk ExamToRisk[]
  examToRiskData ExamToRiskData[]
  examToClinic ExamToClinic[] 
  esocial27Code String?
  employeesHistory EmployeeExamsHistory[] 

  @@unique([id, companyId])
  @@index(companyId)
}

model ExamToClinic {
  id     Int   @id @default(autoincrement())
  exam   Exam @relation(fields: [examId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  examId  Int
  companyId String
  dueInDays Int?
  isScheduled Boolean @default(false)
  observation String?
  examMinDuration Int?
  scheduleRange Json?
  price  Int?
  groupId String? @default(uuid())
  isPeriodic Boolean @default(true)
  isChange Boolean @default(true)
  isAdmission Boolean @default(true)
  isReturn Boolean @default(true)
  isDismissal Boolean @default(true)
  startDate DateTime @default(now())
  endDate DateTime?
  scheduleType ClinicScheduleTypeEnum?
  status StatusEnum @default(ACTIVE)

  @@unique([examId, companyId, startDate, groupId])
}

model ExamToRisk {
  id     Int   @id @default(autoincrement())
  exam   Exam? @relation(fields: [examId], references: [id])
  risk    RiskFactors?  @relation(fields: [riskId], references: [id])
  examId  Int?
  riskId String?
  companyId String 
  company   Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  isMale Boolean @default(false)
  isFemale Boolean @default(false)
  isPeriodic Boolean @default(false)
  isChange Boolean @default(false)
  isAdmission Boolean @default(false)
  isReturn Boolean @default(false)
  isDismissal Boolean @default(false)
  validityInMonths Int?
  lowValidityInMonths Int?
  considerBetweenDays Int?
  fromAge Int?
  toAge Int?
  minRiskDegreeQuantity Int? @default(1)
  minRiskDegree Int? @default(1)
  startDate DateTime @default(now())
  endDate DateTime?
  
  @@unique([id, companyId])
}

model ExamToRiskData {
  exam   Exam @relation(fields: [examId], references: [id])
  risk    RiskFactorData  @relation(fields: [riskFactorDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  examId  Int
  riskFactorDataId String
  isMale Boolean @default(false)
  isFemale Boolean @default(false)
  isPeriodic Boolean @default(false)
  isChange Boolean @default(false)
  isAdmission Boolean @default(false)
  isReturn Boolean @default(false)
  isDismissal Boolean @default(false)
  validityInMonths Int?
  lowValidityInMonths Int?
  considerBetweenDays Int?
  fromAge Int?
  toAge Int?

  @@id([examId, riskFactorDataId])
}


model GenerateSource {
  id    String   @id  @default(uuid())
  riskId    String    
  name String
  companyId String
  system Boolean @default(false)
  created_at DateTime @default(now())
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  risk RiskFactors @relation(fields: [riskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deleted_at DateTime? 
  recMeds RecMed[] 
  riskFactorData RiskFactorData[]

  @@unique([id, companyId])
} 

model Hierarchy {
  id    String     @default(uuid())  @id
  created_at DateTime @default(now())
  status StatusEnum @default(ACTIVE)
  type HierarchyEnum 
  description String @default("")
  realDescription String @default("")
  name String   
  companyId String
  parentId  String?
  refName  String?
  workspaces Workspace[]
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  parent Hierarchy?  @relation(name: "children_parent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children Hierarchy[] @relation(name: "children_parent")
  employees Employee[] 
  subOfficeEmployees Employee[] @relation(name: "sub_offices")
  hierarchyOnHomogeneous HierarchyOnHomogeneous[]
  riskFactorDatas RiskFactorData[] 
  hierarchyHistory EmployeeHierarchyHistory[]
  employeeExamsHistory EmployeeExamsHistory[]
  riskDocInfo RiskFactorsDocInfo[]

  @@unique([id, companyId])
  @@index(companyId)
}

model HierarchyOnHomogeneous {
  hierarchy       Hierarchy     @relation(fields: [hierarchyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hierarchyId     String
  homogeneousGroup   HomogeneousGroup @relation(fields: [homogeneousGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homogeneousGroupId     String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId     String

  @@id([hierarchyId, homogeneousGroupId, workspaceId])
}

model HomogeneousGroup {
  id    String     @default(uuid()) @id
  name String
  description String 
  companyId String
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  characterization CompanyCharacterization?
  environment CompanyEnvironment?
  hierarchyOnHomogeneous HierarchyOnHomogeneous[] 
  created_at DateTime @default(now())
  riskFactorData RiskFactorData[] 
  type HomoTypeEnum?
  
  @@unique([name, companyId])
  @@index(name)
  @@index(companyId)
}

model InviteUsers {
  id   String @id @default(uuid())
  expires_date DateTime
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  companiesIds String[]
  email String? 
  roles String[]
  permissions String[]
  groupId Int?
  group AccessGroups? @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  professional Professional?
}

model License {
  id    Int     @default(autoincrement()) @id
  companies   Company[] @relation(name:"license")
  companyId String  @unique
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())

  @@index(companyId)
}

model Professional {
  id    Int     @default(autoincrement()) @id
  name String
  cpf String?
  phone String?
  email String?
  councilType String?
  councilUF String?
  councilId String?
  formation String[]
  certifications String[]
  created_at DateTime @default(now())
  deleted_at DateTime? 
  updated_at  DateTime   @updatedAt
  type ProfessionalTypeEnum? @default(USER)
  companyId String?
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  professionalPgrSignature RiskFactorGroupDataToProfessional[]
  status StatusEnum @default(ACTIVE)
  userId Int? @unique
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  doctorGroupResponsible  CompanyGroup[] @relation(name:"doctors_group_responsibles")
  doctorCompanyResponsible  Company[] @relation(name:"doctors_company_responsibles")
  tecCompanyResponsible  Company[] @relation(name:"tec_company_responsibles")
  inviteId String? @unique
  invite InviteUsers? @relation(fields: [inviteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  examDoctorHistory EmployeeExamsHistory[]  
  // companies Company[] @relation(name:"companies_related") 

  @@unique([id, companyId])
}

model RecMed {
  id    String   @id  @default(uuid())
  riskId    String    
  recName String? 
  medName String? 
  companyId String
  generateSourceId    String?    
  system Boolean 
  medType MeasuresTypeEnum?
  recType RecTypeEnum?
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  risk RiskFactors @relation(fields: [riskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  generateSource GenerateSource? @relation(fields: [generateSourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deleted_at DateTime? 
  created_at DateTime @default(now())
  recs RiskFactorData[]  @relation(name: "recs")
  adms RiskFactorData[]  @relation(name: "adms")
  dataRecs RiskFactorDataRec[]
  engsToRiskFactorData EngsToRiskFactorData[]

  @@unique([id, companyId])
} 

model RefreshToken {
  id   String @id @default(uuid())
  refresh_token String
  expires_date DateTime
  created_at DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RiskFactors {
  id    String   @id  @default(uuid())
  name String 
  companyId String
  severity Int  @default(0)
  system Boolean @default(false)
  appendix String? 
  risk String? 
  propagation String[] 
  exame String?
  symptoms String?
  method String?
  unit String?
  cas String?
  breather String?
  nr15lt String?
  twa String?
  stel String?
  ipvs String?
  pv String?
  pe String?
  isEmergency Boolean  @default(false)
  carnogenicityACGIH String?
  carnogenicityLinach String?
  status StatusEnum @default(ACTIVE)
  type RiskFactorsEnum
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime @default(now())
  deleted_at DateTime? 
  recMed RecMed[]
  generateSource GenerateSource[]
  representAll Boolean @default(false)
  riskFactorData RiskFactorData[]
  riskFactorProbability RiskFactorProbability[]
  examToRisk ExamToRisk[]
  docInfo RiskFactorsDocInfo[]
  json Json?
  
  @@unique([id, companyId])
}

model RiskFactorsDocInfo {
  id    Int     @default(autoincrement()) @id
  risk   RiskFactors @relation(fields: [riskId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  hierarchy   Hierarchy? @relation(fields: [hierarchyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  riskId String 
  companyId String 
  hierarchyId String? 
  isAso Boolean  @default(true)
  isPGR Boolean  @default(true)
  isPCMSO Boolean  @default(true)
  isPPP Boolean  @default(true)
  created_at DateTime @default(now())
 
  @@index(companyId)
  @@unique([companyId,riskId,hierarchyId])
}

model RiskFactorDocument {
  id    String   @id  @default(uuid())
  fileUrl String?
  name String 
  description String @default("")
  version String  @default("1.0.0")
  companyId String
  riskGroupId String
  workspaceName String
  workspaceId String
  elaboratedBy String?
  revisionBy String?
  approvedBy String?
  validity String?
  workspace Workspace @relation(fields: [workspaceId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  riskGroup RiskFactorGroupData @relation(fields: [riskGroupId, companyId], references: [id, companyId], onDelete: Restrict, onUpdate: Cascade)
  attachments Attachments[]
  @@unique([id, companyId])
} 

model RiskFactorGroupData {
  id    String   @id  @default(uuid())
  name String?
  created_at DateTime @default(now())
  companyId String
  source String?
  elaboratedBy String?
  coordinatorBy String?
  revisionBy String?
  approvedBy String?
  validity String?
  visitDate DateTime?
  isQ5 Boolean @default(false)
  hasEmergencyPlan Boolean @default(false)
  validityStart DateTime?
  validityEnd DateTime?
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  data RiskFactorData[]
  docs RiskFactorDocument[]
  status StatusEnum @default(PROGRESS)
  professionalsSignatures RiskFactorGroupDataToProfessional[]
  usersSignatures RiskFactorGroupDataToUser[]
  complementaryDocs String[]
  complementarySystems String[]
  months_period_level_5 Int @default(3)
  months_period_level_4 Int @default(6)
  months_period_level_3 Int @default(12)
  months_period_level_2 Int @default(24)

  @@unique([id, companyId])
}

model RiskFactorGroupDataToUser {
  riskFactorGroupDataId    String   @map("A") 
  userId Int @map("B") 
  riskFactorData RiskFactorGroupData  @relation(fields: [riskFactorGroupDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isSigner Boolean @default(false)
  isElaborator Boolean @default(false)

  @@id([userId, riskFactorGroupDataId])
  @@map("_RiskFactorGroupDataToUser")
} 

model RiskFactorGroupDataToProfessional {
  riskFactorGroupDataId    String   @map("B") 
  professionalId Int @map("A") 
  riskFactorData RiskFactorGroupData  @relation(fields: [riskFactorGroupDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professional Professional  @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isSigner Boolean @default(false)
  isElaborator Boolean @default(false)

  @@id([riskFactorGroupDataId, professionalId])
  @@map("_ProfessionalToRiskFactorGroupData")
} 

model RiskFactorData {
  id    String   @id  @default(uuid())
  probability Int?
  probabilityAfter Int?
  probabilityCalc RiskFactorProbability? @relation(name: "RiskFactorProbabilityBefore")
  probabilityAfterCalc RiskFactorProbability? @relation(name: "RiskFactorProbabilityAfter")
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  riskId    String
  riskFactor RiskFactors @relation(fields: [riskId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  homogeneousGroupId String?
  homogeneousGroup HomogeneousGroup? @relation(fields: [homogeneousGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hierarchyId String?
  hierarchy Hierarchy? @relation(fields: [hierarchyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  riskFactorGroupDataId String
  riskFactorGroupData RiskFactorGroupData @relation(fields: [riskFactorGroupDataId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  generateSources GenerateSource[]
  recs RecMed[]  @relation(name: "recs")
  adms RecMed[]  @relation(name: "adms")
  dataRecs RiskFactorDataRec[]
  json Json?
  level    Int?
  standardExams Boolean @default(true)
  epiToRiskFactorData EpiToRiskFactorData[]
  engsToRiskFactorData EngsToRiskFactorData[]
  examsToRiskFactorData ExamToRiskData[]

  @@unique([id, companyId])
  @@unique([homogeneousGroupId, riskId, riskFactorGroupDataId])
  @@unique([hierarchyId, riskId, riskFactorGroupDataId])
  @@unique([id, riskId, riskFactorGroupDataId])
  @@index(companyId)
}

model RiskFactorProbability {
  id    String   @id  @default(uuid())
  intensity Int?
  intensityResult Float?
  intensityLt Float?
  minDurationJT Int?
  minDurationEO Int?
  chancesOfHappening Int?
  frequency Int?
  history Int?
  medsImplemented Int?
  riskFactorDataAfterId String?
  riskFactorDataId String?
  riskId    String
  riskFactorGroupDataId String?
  riskFactor RiskFactors @relation(fields: [riskId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  riskFactorData RiskFactorData? @relation(name: "RiskFactorProbabilityBefore", fields: [riskFactorDataId,riskId,riskFactorGroupDataId], references: [id,riskId,riskFactorGroupDataId], onDelete: Restrict, onUpdate: Cascade)
  riskFactorDataAfter RiskFactorData? @relation(name: "RiskFactorProbabilityAfter", fields: [riskFactorDataAfterId,riskId,riskFactorGroupDataId], references: [id,riskId,riskFactorGroupDataId], onDelete: Restrict, onUpdate: Cascade)

  @@unique([riskFactorDataId,riskId,riskFactorGroupDataId])
  @@unique([riskFactorDataAfterId,riskId,riskFactorGroupDataId])
}

model RiskFactorDataRec {
  id    String   @id  @default(uuid())
  responsibleName    String?
  endDate    DateTime?
  status    StatusEnum @default(PENDING)
  recMedId String
  riskFactorDataId String
  recMed RecMed @relation(fields: [recMedId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  riskFactorData RiskFactorData @relation(fields: [riskFactorDataId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  comments RiskFactorDataRecComments[]
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([riskFactorDataId, recMedId, companyId])
}

model RiskFactorDataRecComments {
  id    String   @id  @default(uuid())
  text    String
  type    RiskRecTypeEnum
  textType    RiskRecTextTypeEnum
  riskFactorDataRecId String
  riskFactorDataRec RiskFactorDataRec @relation(fields: [riskFactorDataRecId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name String?
  phone String?
  cpf String?
  googleExternalId String? 
  facebookExternalId String? 
  password String
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at DateTime? 
  usersPgrSignatures RiskFactorGroupDataToUser[]
  refresh_token RefreshToken[]
  companies UserCompany[]
  examDone EmployeeExamsHistory[] @relation(name: "user_done")
  examSchedules EmployeeExamsHistory[] @relation(name: "user_schedule")
  professional Professional? 

  @@unique([id, name])
  @@index(email)
}

model UserCompany {
  roles String[]
  permissions String[]
  groupId Int?
  group AccessGroups? @relation(fields: [groupId], references: [id], onDelete: SetNull, onUpdate: Cascade) 
  status StatusEnum @default(ACTIVE)
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  
  @@id([companyId, userId])
  @@index(companyId)
}

model Workspace {
  id    String  @id   @default(uuid()) 
  name String  
  abbreviation String?
  description String?  
  cnpj String?  
  companyJson Json?  
  created_at DateTime @default(now())
  isOwner Boolean @default(true)
  updated_at  DateTime   @updatedAt
  companyId String
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  address Address?
  riskFactorDocument RiskFactorDocument[]
  hierarchyOnHomogeneous HierarchyOnHomogeneous[]
  hierarchy Hierarchy[]
  companyEnvironment CompanyEnvironment[]
  characterization CompanyCharacterization[]

  @@unique([abbreviation, companyId])
  @@unique([id, companyId])
  @@index(companyId)
}


