generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Absenteeism {
  id                Int                  @id @default(autoincrement())
  observation       String?
  sameAsBefore      Boolean?
  startDate         DateTime
  endDate           DateTime
  traffic           Int?
  vacationStartDate DateTime?
  vacationEndDate   DateTime?
  cnpjSind          String?
  infOnusRemun      Int?
  cnpjMandElet      String?
  origRetif         Int?
  tpProc            Int?
  nrProc            Int?
  motiveId          Int?
  esocial18Motive   Int?
  cidId             String?
  employeeId        Int
  docId             Int?
  isExtern          Boolean?
  isJustified       Boolean?
  local             String?
  status            StatusEnum           @default(ACTIVE)
  timeSpent         Int
  timeUnit          DateUnitEnum
  cid               Cid?                 @relation(fields: [cidId], references: [cid], onDelete: Restrict)
  doc               ProfessionalCouncil? @relation(fields: [docId], references: [id], onDelete: Restrict)
  employee          Employee             @relation(fields: [employeeId], references: [id])
  esocial18         EsocialTable18Mot?   @relation(fields: [esocial18Motive], references: [id], onDelete: Restrict)
  motive            AbsenteeismMotive?   @relation(fields: [motiveId], references: [id], onDelete: Restrict)

  @@index([startDate])
  @@index([endDate])
}

model AbsenteeismMotive {
  id          Int           @id @default(autoincrement())
  desc        String
  absenteeism Absenteeism[]
}

model AccessGroups {
  id          Int           @id @default(autoincrement())
  roles       String[]
  permissions String[]
  companyId   String
  description String?
  name        String
  system      Boolean       @default(false)
  company     Company       @relation(fields: [companyId], references: [id])
  invites     InviteUsers[]
  users       UserCompany[]
  alerts      Alert[]

  @@unique([id, companyId])
}

model Activity {
  id                         Int       @id @default(autoincrement())
  code                       String    @unique
  name                       String
  created_at                 DateTime  @default(now())
  riskDegree                 Int       @default(0)
  company_primary_activity   Company[] @relation("primary_activity")
  company_secondary_activity Company[] @relation("secondary_activity")
}

model Address {
  id           String    @id @default(uuid())
  companyId    String
  cep          String
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  workspaceId  String?
  workspace    Workspace @relation(fields: [id, companyId], references: [id, companyId], onDelete: Cascade)

  @@unique([workspaceId, companyId])
  @@unique([id, companyId])
  @@index([companyId])
}

model AddressCompany {
  id           String       @id @default(uuid())
  cep          String
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  companyId    String       @unique
  uf           UfStateEnum?
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Attachments {
  id                   String              @id @default(uuid())
  name                 String?
  url                  String
  link                 String?
  created_at           DateTime            @default(now())
  deleted_at           DateTime?
  updated_at           DateTime            @updatedAt
  riskFactorDocumentId String?
  riskFactorDocument   RiskFactorDocument? @relation(fields: [riskFactorDocumentId], references: [id], onDelete: Restrict)
}

model Cat {
  id                     Int                     @id @default(autoincrement())
  dtAcid                 DateTime
  tpAcid                 Int
  hrAcid                 String?
  hrsTrabAntesAcid       String?
  tpCat                  Int
  isIndCatObito          Boolean?
  dtObito                DateTime?
  isIndComunPolicia      Boolean?
  codSitGeradora         String
  iniciatCAT             Int
  obsCAT                 String?
  ultDiaTrab             DateTime?
  houveAfast             Boolean?
  tpLocal                Int
  dscLocal               String
  tpLograd               String?
  dscLograd              String
  nrLograd               String
  complemento            String?
  bairro                 String?
  cep                    String?
  codMunic               String?
  uf                     String?
  pais                   String?
  codPostal              String?
  ideLocalAcidTpInsc     Int?
  ideLocalAcidCnpj       String?
  codParteAting          String
  lateralidade           Int
  codAgntCausador        String
  dtAtendimento          DateTime
  hrAtendimento          String
  isIndInternacao        Boolean
  durTrat                Int
  isIndAfast             Boolean
  dscLesao               String
  dscCompLesao           String?
  diagProvavel           String?
  codCID                 String
  observacao             String?
  nrRecCatOrig           String?
  employeeId             Int
  docId                  Int
  status                 StatusEnum              @default(ACTIVE)
  sendEvent              Boolean                 @default(true)
  catOriginId            Int?
  catOrigin              Cat?                    @relation("cat_oringin_fk", fields: [catOriginId], references: [id], onDelete: Restrict)
  catReopen              Cat[]                   @relation("cat_oringin_fk")
  esocialAgntCausador    EsocialTable14And15Acid @relation("cat_ag_causador", fields: [codAgntCausador], references: [code])
  cid                    Cid                     @relation(fields: [codCID], references: [cid])
  city                   Cities?                 @relation(fields: [codMunic], references: [code], onDelete: Restrict)
  codParteAtingEsocial13 EsocialTable13BodyPart  @relation(fields: [codParteAting], references: [code])
  esocialSitGeradora     EsocialTable14And15Acid @relation("cat_sit_geradora", fields: [codSitGeradora], references: [code])
  doc                    ProfessionalCouncil     @relation(fields: [docId], references: [id])
  esocialLesao           EsocialTable17Injury    @relation(fields: [dscLesao], references: [code])
  employee               Employee                @relation(fields: [employeeId], references: [id])
  countryCodeEsocial6    EsocialTable6Country?   @relation(fields: [pais], references: [code], onDelete: Restrict)
  esocialLograd          EsocialTable20Lograd?   @relation(fields: [tpLograd], references: [code], onDelete: Restrict)
  uf_table               Uf?                     @relation(fields: [uf], references: [uf], onDelete: Restrict)
  events                 EmployeeESocialEvent[]
}

model Cbo {
  code String @id
  desc String

  @@unique([code, desc])
}

model Checklist {
  id         Int            @default(autoincrement())
  status     StatusEnum     @default(PROGRESS)
  name       String
  companyId  String
  system     Boolean
  created_at DateTime       @default(now())
  company    Company        @relation(fields: [companyId], references: [id])
  data       ChecklistData?

  @@id([id, companyId])
}

model ChecklistData {
  json        Json
  companyId   String
  checklistId Int
  checklist   Checklist @relation(fields: [checklistId, companyId], references: [id, companyId], onDelete: Cascade)

  @@id([checklistId, companyId])
}

model Cid {
  cid          String        @id
  description  String?
  class        String?
  kill         Boolean?
  sex          SexTypeEnum?
  absenteeisms Absenteeism[]
  cat          Cat[]
  employees    Employee[]

  @@index([description])
}

model Cities {
  code       String  @id
  name       String
  normalized String?
  ufCode     String?
  cat        Cat[]
  uf         Uf?     @relation(fields: [ufCode], references: [code], onDelete: Restrict)

  @@index([name])
}

model Company {
  id                              String                  @id @default(uuid())
  cnpj                            String?
  name                            String
  fantasy                         String?
  description                     String?
  size                            String?
  phone                           String?
  legal_nature                    String?
  cadastral_situation             String?
  activity_start_date             String?
  cadastral_situation_date        String?
  legal_nature_code               String?
  cadastral_situation_description String?
  isConsulting                    Boolean                 @default(false)
  licenseId                       Int?
  created_at                      DateTime                @default(now())
  updated_at                      DateTime                @updatedAt
  status                          StatusEnum              @default(ACTIVE)
  type                            CompanyTypesEnum        @default(MATRIZ)
  deleted_at                      DateTime?
  email                           String?
  logoUrl                         String?
  mission                         String?
  values                          String?
  vision                          String?
  operationTime                   String?
  shortName                       String?
  responsibleName                 String?
  groupId                         Int?
  blockResignationExam            Boolean                 @default(true)
  esocialStart                    DateTime?
  numAsos                         Int?
  doctorResponsibleId             Int?
  initials                        String?
  responsibleCpf                  String?
  responsibleNit                  String?
  stateRegistration               String?
  tecResponsibleId                Int?
  unit                            String?
  activityStartDate               DateTime?
  obs                             String?
  isClinic                        Boolean                 @default(false)
  paymentDay                      Int?
  paymentType                     CompanyPaymentTypeEnum?
  isTaxNote                       Boolean                 @default(false)
  observationBank                 String?
  isGroup                         Boolean                 @default(false)
  companyGroupId                  Int?                    @unique
  esocialLastTransmission         DateTime?
  esocialSend                     Boolean?

  permissions String[]

  accessGroups               AccessGroups[]
  address                    AddressCompany?
  checklist                  Checklist[]
  companyGroup               CompanyGroup?                    @relation("company_group", fields: [companyGroupId], references: [id], onDelete: Restrict)
  doctorResponsible          ProfessionalCouncil?             @relation("doctors_council_company_responsibles", fields: [doctorResponsibleId], references: [id], onDelete: Restrict)
  group                      CompanyGroup?                    @relation("group", fields: [groupId], references: [id], onDelete: Restrict)
  license                    License?                         @relation("license", fields: [licenseId], references: [id], onDelete: Restrict)
  tecResponsible             ProfessionalCouncil?             @relation("tec_council_company_responsibles", fields: [tecResponsibleId], references: [id], onDelete: Restrict)
  cert                       CompanyCert?
  characterization           CompanyCharacterization[]
  companiesToClinicAvailable CompanyClinics[]                 @relation("clinics_available")
  clinicsAvailable           CompanyClinics[]                 @relation("companies_available")
  environments               CompanyEnvironment[]
  companyGroups              CompanyGroup[]                   @relation("company")
  os                         CompanyOS?
  report                     CompanyReport?
  shifts                     CompanyShift[]
  contacts                   Contact[]
  applyingServiceContracts   Contract[]                       @relation("contracts")
  receivingServiceContracts  Contract[]
  databaseTable              DatabaseTable[]
  documents                  Document[]
  covers                     DocumentCover[]
  documentData               DocumentData[]
  employees                  Employee[]
  esocialTransmissions       EmployeeESocialBatch[]
  esocialEvents              EmployeeESocialEvent[]
  examClinicHistory          EmployeeExamsHistory[]
  exams                      Exam[]
  clinicExams                ExamToClinic[]
  examsToRisk                ExamToRisk[]
  generateSource             GenerateSource[]
  hierarchy                  Hierarchy[]
  homogeneousGroup           HomogeneousGroup[]
  invites                    InviteUsers[]
  notifications              Notification[]                   @relation("owner_notification_company")
  professionals              Professional[]
  professionalsResponsibles  ProfessionalCouncilResponsible[]
  protocol                   Protocol[]
  protocolToRisk             ProtocolToRisk[]
  recMed                     RecMed[]
  riskFactorData             RiskFactorData[]
  riskFactorDataRec          RiskFactorDataRec[]
  riskFactorDocument         RiskFactorDocument[]
  riskFactorGroupData        RiskFactorGroupData[]
  riskFactors                RiskFactors[]
  riskDocInfo                RiskFactorsDocInfo[]
  users                      UserCompany[]
  workspace                  Workspace[]
  notification               Notification[]                   @relation("CompanyToNotification")
  primary_activity           Activity[]                       @relation("primary_activity")
  secondary_activity         Activity[]                       @relation("secondary_activity")
  createdScheduleBlocks      ScheduleBlock[]
  scheduleBlocks             ScheduleBlock[]                  @relation(name: "schedule_block_m2m_companies")
  alerts                     Alert[]
  documentModels             DocumentModel[]
  scheduleMedicalVisits      ScheduleMedicalVisit[]
  clinicMedicalVisits        ScheduleMedicalVisit[]           @relation(name: "medical_visit_clinic")
  labMedicalVisits           ScheduleMedicalVisit[]           @relation(name: "medical_visit_lab")
  ImageGallery               ImageGallery[]
  UserHistory                UserHistory[]
  ExamToRiskSkipCompany      ExamToRiskSkipCompany[]

  @@index([name])
  @@index([isClinic])
  @@index([isConsulting])
  @@index([initials])
  @@index([fantasy])
  @@index([cnpj])
}

model CompanyCert {
  id          String   @id @default(uuid())
  key         String
  certificate String
  notAfter    DateTime
  notBefore   DateTime
  companyId   String   @unique
  company     Company  @relation(fields: [companyId], references: [id])
}

model CompanyClinics {
  companyId  String
  clinicId   String
  created_at DateTime @default(now())
  clinic     Company  @relation("clinics_available", fields: [clinicId], references: [id])
  company    Company  @relation("companies_available", fields: [companyId], references: [id])

  @@id([companyId, clinicId])
}

model CompanyGroup {
  id                   Int                  @id @default(autoincrement())
  name                 String
  description          String?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  companyId            String
  blockResignationExam Boolean              @default(true)
  esocialStart         DateTime?
  numAsos              Int?
  doctorResponsibleId  Int?
  tecResponsibleId     Int?
  esocialSend          Boolean?
  companyGroup         Company?             @relation("company_group")
  companies            Company[]            @relation("group")
  company              Company              @relation("company", fields: [companyId], references: [id])
  doctorResponsible    ProfessionalCouncil? @relation("doctors_council_group_responsibles", fields: [doctorResponsibleId], references: [id], onDelete: Restrict)
  tecResponsible       ProfessionalCouncil? @relation("tec_council_group_responsibles", fields: [tecResponsibleId], references: [id], onDelete: Restrict)

  @@unique([id, companyId])
}

model CompanyCharacterization {
  id                 String                         @id @default(uuid())
  name               String
  description        String?
  created_at         DateTime                       @default(now())
  deleted_at         DateTime?
  updated_at         DateTime                       @updatedAt
  type               CharacterizationTypeEnum
  workspaceId        String
  companyId          String
  considerations     String[]
  order              Int?
  activities         String[]
  luminosity         String?
  moisturePercentage String?
  noiseValue         String?
  temperature        String?
  profileName        String?
  profileParentId    String?
  paragraphs         String[]
  status             StatusEnum                     @default(ACTIVE)
  company            Company                        @relation(fields: [companyId], references: [id])
  homogeneousGroup   HomogeneousGroup               @relation(fields: [id], references: [id], onDelete: Cascade)
  profileParent      CompanyCharacterization?       @relation("profiles", fields: [profileParentId], references: [id], onDelete: Cascade)
  profiles           CompanyCharacterization[]      @relation("profiles")
  workspace          Workspace                      @relation(fields: [workspaceId], references: [id])
  photos             CompanyCharacterizationPhoto[]

  @@unique([workspaceId, companyId, id])
}

model CompanyCharacterizationPhoto {
  id                        String                  @id @default(uuid())
  name                      String
  isVertical                Boolean                 @default(false)
  photoUrl                  String
  created_at                DateTime                @default(now())
  deleted_at                DateTime?
  updated_at                DateTime                @updatedAt
  companyCharacterizationId String
  order                     Int?
  companyEnvironment        CompanyCharacterization @relation(fields: [companyCharacterizationId], references: [id])
}

model CompanyReport {
  id              Int       @id @default(autoincrement())
  lastDailyReport DateTime?
  dailyReport     Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  companyId       String    @unique
  esocialDone     Int       @default(0)
  esocialPendent  Int       @default(0)
  esocialReject   Int       @default(0)
  esocialProgress Int       @default(0)
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model CompanyEnvironment {
  id                  String                      @id @default(uuid())
  name                String
  description         String?
  created_at          DateTime                    @default(now())
  deleted_at          DateTime?
  updated_at          DateTime                    @updatedAt
  workspaceId         String
  parentEnvironmentId String?
  type                CompanyEnvironmentTypesEnum
  companyId           String
  moisturePercentage  String?
  noiseValue          String?
  temperature         String?
  luminosity          String?
  considerations      String[]
  order               Int?
  activities          String[]
  paragraphs          String[]
  company             Company                     @relation(fields: [companyId], references: [id])
  homogeneousGroup    HomogeneousGroup            @relation(fields: [id], references: [id], onDelete: Cascade)
  parentEnvironment   CompanyEnvironment?         @relation("parent_enviroment", fields: [parentEnvironmentId], references: [id], onDelete: Restrict)
  childEnvironments   CompanyEnvironment[]        @relation("parent_enviroment")
  workspace           Workspace                   @relation(fields: [workspaceId], references: [id])
  photos              CompanyEnvironmentPhoto[]

  @@unique([workspaceId, companyId, id])
}

model CompanyEnvironmentPhoto {
  id                   String             @id @default(uuid())
  name                 String
  photoUrl             String
  created_at           DateTime           @default(now())
  deleted_at           DateTime?
  updated_at           DateTime           @updatedAt
  companyEnvironmentId String
  isVertical           Boolean            @default(false)
  order                Int?
  companyEnvironment   CompanyEnvironment @relation(fields: [companyEnvironmentId], references: [id])
}

model CompanyShift {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  companyId   String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employees   Employee[]

  @@unique([id, companyId])
}

model Contact {
  id          Int        @id @default(autoincrement())
  name        String?
  phone       String?
  phone_1     String?
  email       String?
  obs         String?
  companyId   String
  updated_at  DateTime   @updatedAt
  status      StatusEnum @default(ACTIVE)
  created_at  DateTime   @default(now())
  isPrincipal Boolean    @default(false)
  company     Company    @relation(fields: [companyId], references: [id])

  @@unique([id, companyId])
}

model Contract {
  applyingServiceCompanyId  String
  receivingServiceCompanyId String
  status                    StatusEnum @default(ACTIVE)
  created_at                DateTime   @default(now())
  applyingServiceCompany    Company    @relation("contracts", fields: [applyingServiceCompanyId], references: [id])
  receivingServiceCompany   Company    @relation(fields: [receivingServiceCompanyId], references: [id])

  @@id([applyingServiceCompanyId, receivingServiceCompanyId])
}

model DatabaseTable {
  id         Int        @default(autoincrement())
  name       String
  version    Int        @default(1)
  companyId  String
  system     Boolean
  status     StatusEnum @default(ACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  company    Company    @relation(fields: [companyId], references: [id])

  @@id([id, companyId])
}

model Document {
  id               Int              @id @default(autoincrement())
  fileUrl          String?
  name             String?
  description      String?
  startDate        DateTime         @default(now())
  endDate          DateTime?
  type             DocumentTypeEnum @default(OTHER)
  status           StatusEnum       @default(ACTIVE)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  parentDocumentId Int?
  companyId        String
  workspaceId      String?
  company          Company          @relation(fields: [companyId], references: [id])
  parentDocument   Document?        @relation("document_parent", fields: [parentDocumentId], references: [id], onDelete: Restrict)
  oldDocuments     Document[]       @relation("document_parent")
  workspace        Workspace?       @relation(fields: [workspaceId, companyId], references: [id, companyId], onDelete: Cascade)

  @@unique([id, companyId])
  @@index([type])
  @@index([companyId])
  @@index([parentDocumentId])
}

model DocumentCover {
  id         Int             @id @default(autoincrement())
  companyId  String
  acceptType CoverTypeEnum[]
  json       Json
  name       String?
  company    Company         @relation(fields: [companyId], references: [id])

  @@unique([id, companyId])
}

model DocumentData {
  id            String           @id @default(uuid())
  name          String?
  created_at    DateTime         @default(now())
  companyId     String
  workspaceId   String
  validityStart DateTime?
  validityEnd   DateTime?
  status        StatusEnum       @default(PROGRESS)
  type          DocumentTypeEnum
  modelId       Int?

  elaboratedBy  String?
  coordinatorBy String?
  revisionBy    String?
  approvedBy    String?

  json Json?

  company                 Company                      @relation(fields: [companyId], references: [id])
  model                   DocumentModel?               @relation(fields: [modelId], references: [id])
  docs                    RiskFactorDocument[]
  professionalsSignatures DocumentDataToProfessional[]
  workspace               Workspace                    @relation(fields: [workspaceId], references: [id])

  @@unique([id, companyId])
  @@unique([type, workspaceId, companyId])
}

model DocumentModel {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  companyId   String
  system      Boolean          @default(false)
  status      StatusEnum       @default(ACTIVE)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  company     Company          @relation(fields: [companyId], references: [id])
  type        DocumentTypeEnum
  data        Bytes
  documents   DocumentData[]

  @@unique([id, companyId])
}

model CompanyOS {
  id           Int        @id @default(autoincrement())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  status       StatusEnum @default(ACTIVE)
  med          Json?
  rec          Json?
  obligations  Json?
  prohibitions Json?
  procedures   Json?
  cipa         Json?
  declaration  Json?
  companyId    String     @unique
  company      Company    @relation(fields: [companyId], references: [id])

  @@unique([id, companyId])
}

model Employee {
  id                   Int                        @id @default(autoincrement())
  created_at           DateTime                   @default(now())
  updated_at           DateTime                   @updatedAt
  deleted_at           DateTime?
  status               StatusEnum                 @default(PENDING)
  name                 String
  cpf                  String
  companyId            String
  hierarchyId          String?
  admissionDate        DateTime?
  birthday             DateTime?
  email                String?
  esocialCode          String?
  isComorbidity        Boolean?                   @default(false)
  isPCD                Boolean?                   @default(false)
  nickname             String?
  phone                String?
  sex                  SexTypeEnum?
  shiftId              Int?
  socialName           String?
  lastExam             DateTime?
  skippedDismissalExam Boolean?
  expiredDateExam      DateTime?
  newExamAdded         DateTime?
  cbo                  String?
  rg                   String?
  absenteeisms         Absenteeism[]
  cat                  Cat[]
  cids                 Cid[]
  company              Company                    @relation(fields: [companyId], references: [id])
  hierarchy            Hierarchy?                 @relation(fields: [hierarchyId], references: [id], onDelete: Restrict)
  shift                CompanyShift?              @relation(fields: [shiftId], references: [id], onDelete: Restrict)
  esocialEvents        EmployeeESocialEvent[]
  examsHistory         EmployeeExamsHistory[]
  hierarchyHistory     EmployeeHierarchyHistory[]
  pppHistory           EmployeePPPHistory[]
  subOffices           Hierarchy[]                @relation("sub_offices")
  normalized           String?

  @@unique([id, companyId])
  @@unique([cpf, companyId])
  @@index([cpf], type: Hash)
  @@index([esocialCode])
  @@index([name])
  @@index([email])
  @@index([companyId])
  @@index([expiredDateExam])
}

model EmployeeHierarchyHistory {
  id             Int                             @id @default(autoincrement())
  created_at     DateTime                        @default(now())
  updated_at     DateTime                        @updatedAt
  motive         EmployeeHierarchyMotiveTypeEnum
  startDate      DateTime?
  hierarchyId    String
  employeeId     Int
  deletedAt      DateTime?
  employee       Employee                        @relation(fields: [employeeId], references: [id])
  hierarchy      Hierarchy                       @relation(fields: [hierarchyId], references: [id])
  subHierarchies Hierarchy[]                     @relation("sub_offices_history")

  @@index([deletedAt])
}

model EmployeeExamsHistory {
  id                     Int                        @id @default(autoincrement())
  created_at             DateTime                   @default(now())
  updated_at             DateTime                   @updatedAt
  doneDate               DateTime?
  validityInMonths       Int?
  time                   String?
  examId                 Int
  employeeId             Int
  clinicId               String?
  conclusion             ExamHistoryConclusionEnum?
  doctorId               Int?
  evaluationType         ExamHistoryEvaluationEnum?
  examType               ExamHistoryTypeEnum?
  obs                    String?
  status                 StatusEnum                 @default(DONE)
  userDoneId             Int?
  userScheduleId         Int?
  scheduleMedicalVisitId Int?
  expiredDate            DateTime?
  changeHierarchyAnyway  Boolean                    @default(false)
  changeHierarchyDate    DateTime?
  clinicObs              String?
  hierarchyId            String?
  scheduleType           ClinicScheduleTypeEnum?
  fileUrl                String?
  subOfficeId            String?
  deletedAt              DateTime?
  sendEvent              Boolean                    @default(true)
  asoExamId              Int?
  isSequential           Boolean?
  events                 EmployeeESocialEvent[]
  asoExam                EmployeeExamsHistory?      @relation("aso_exam_relation", fields: [asoExamId], references: [id], onDelete: Restrict)
  complementaryExams     EmployeeExamsHistory[]     @relation("aso_exam_relation")
  clinic                 Company?                   @relation(fields: [clinicId], references: [id], onDelete: Restrict)
  doctor                 ProfessionalCouncil?       @relation(fields: [doctorId], references: [id], onDelete: Restrict)
  employee               Employee                   @relation(fields: [employeeId], references: [id])
  exam                   Exam                       @relation(fields: [examId], references: [id])
  scheduleMedicalVisit   ScheduleMedicalVisit?      @relation(fields: [scheduleMedicalVisitId], references: [id])
  hierarchy              Hierarchy?                 @relation(fields: [hierarchyId], references: [id], onDelete: Restrict)
  subOffice              Hierarchy?                 @relation("subOffice_employee_exam", fields: [subOfficeId], references: [id], onDelete: Restrict)
  userDone               User?                      @relation("user_done", fields: [userDoneId], references: [id], onDelete: Restrict)
  userSchedule           User?                      @relation("user_schedule", fields: [userScheduleId], references: [id], onDelete: Restrict)

  @@index([status])
  @@index([deletedAt])
  @@index([employeeId])
  @@index([fileUrl])
  @@index([clinicId])
}

model EmployeeESocialBatch {
  id                 Int                          @id @default(autoincrement())
  created_at         DateTime                     @default(now())
  updated_at         DateTime                     @updatedAt
  status             StatusEnum                   @default(PENDING)
  userTransmissionId Int?
  companyId          String
  environment        Int?
  type               EmployeeESocialEventTypeEnum
  protocolId         String?
  response           Json?
  company            Company                      @relation(fields: [companyId], references: [id])
  userTransmission   User?                        @relation(fields: [userTransmissionId], references: [id], onDelete: Restrict)
  events             EmployeeESocialEvent[]

  @@index([status])
}

model EmployeeESocialEvent {
  id            Int                             @id @default(autoincrement())
  created_at    DateTime                        @default(now())
  updated_at    DateTime                        @updatedAt
  batchId       Int?
  eventsDate    DateTime?
  status        StatusEnum                      @default(PENDING)
  eventXml      String
  employeeId    Int
  companyId     String
  examHistoryId Int?
  type          EmployeeESocialEventTypeEnum
  eventId       String?
  receipt       String?
  response      Json?
  action        EmployeeESocialEventActionEnum?
  pppId         Int?
  catId         Int?
  batch         EmployeeESocialBatch?           @relation(fields: [batchId], references: [id], onDelete: Restrict)
  cat           Cat?                            @relation(fields: [catId], references: [id], onDelete: Cascade)
  company       Company                         @relation(fields: [companyId], references: [id])
  employee      Employee                        @relation(fields: [employeeId], references: [id])
  exam          EmployeeExamsHistory?           @relation(fields: [examHistoryId], references: [id], onDelete: Restrict)
  ppp           EmployeePPPHistory?             @relation(fields: [pppId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([status])
  @@index([eventsDate])
}

model EmployeePPPHistory {
  id         Int                    @id @default(autoincrement())
  created_at DateTime               @default(now())
  updated_at DateTime               @updatedAt
  doneDate   DateTime?
  status     StatusEnum             @default(DONE)
  sendEvent  Boolean                @default(true)
  employeeId Int
  json       Json?
  events     EmployeeESocialEvent[]
  employee   Employee               @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, doneDate])
  @@index([status])
  @@index([employeeId])
}

model EngsToRiskFactorData {
  recMedId         String         @map("A")
  riskFactorDataId String         @map("B")
  efficientlyCheck Boolean        @default(false)
  endDate          DateTime?
  startDate        DateTime?
  recMed           RecMed         @relation(fields: [recMedId], references: [id], onDelete: Cascade)
  riskFactorData   RiskFactorData @relation(fields: [riskFactorDataId], references: [id], onDelete: Cascade)

  @@id([riskFactorDataId, recMedId])
  @@map("_engs")
}

model Epi {
  id                  Int                   @id @default(autoincrement())
  ca                  String
  isValid             Boolean?
  national            Boolean               @default(true)
  expiredDate         DateTime?
  description         String                @default("")
  report              String                @default("")
  restriction         String                @default("")
  observation         String                @default("")
  equipment           String                @default("")
  status              StatusEnum            @default(ACTIVE)
  created_at          DateTime              @default(now())
  deleted_at          DateTime?
  epiToRiskFactorData EpiToRiskFactorData[]

  @@unique([ca, status])
  @@index([ca])
}

model EpiToRiskFactorData {
  epiId            Int            @map("A")
  riskFactorDataId String         @map("B")
  efficientlyCheck Boolean        @default(false)
  epcCheck         Boolean        @default(false)
  lifeTimeInDays   Int?
  longPeriodsCheck Boolean        @default(false)
  maintenanceCheck Boolean        @default(false)
  sanitationCheck  Boolean        @default(false)
  tradeSignCheck   Boolean        @default(false)
  trainingCheck    Boolean        @default(false)
  unstoppedCheck   Boolean        @default(false)
  validationCheck  Boolean        @default(false)
  endDate          DateTime?
  startDate        DateTime?
  epi              Epi            @relation(fields: [epiId], references: [id], onDelete: Cascade)
  riskFactorData   RiskFactorData @relation(fields: [riskFactorDataId], references: [id], onDelete: Cascade)

  @@id([riskFactorDataId, epiId])
  @@map("_EpiToRiskFactorData")
}

model EsocialTable18Mot {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  description  String
  absenteeisms Absenteeism[]
}

model EsocialTable6Country {
  code String @id
  name String
  cat  Cat[]
}

model EsocialTable13BodyPart {
  code String @id
  desc String
  cat  Cat[]
}

model EsocialTable14And15Acid {
  code             String  @id
  desc             String
  case             String?
  table            Int
  cat_ag_causador  Cat[]   @relation("cat_ag_causador")
  cat_sit_geradora Cat[]   @relation("cat_sit_geradora")
}

model EsocialTable17Injury {
  code String @id
  desc String
  cat  Cat[]
}

model EsocialTable20Lograd {
  code String @id
  desc String
  cat  Cat[]
}

model EsocialTable24 {
  id         String          @id
  name       String
  group      String
  type       RiskFactorsEnum
  isQuantity Boolean         @default(false)
  risks      RiskFactors[]
}

model Exam {
  id               Int                    @id @default(autoincrement())
  name             String
  instruction      String?
  material         String?
  companyId        String
  status           StatusEnum             @default(ACTIVE)
  type             ExamTypeEnum?
  updated_at       DateTime               @updatedAt
  created_at       DateTime               @default(now())
  system           Boolean                @default(false)
  analyses         String?
  deleted_at       DateTime?
  isAttendance     Boolean                @default(false)
  isAvaliation     Boolean                @default(false)
  esocial27Code    String?
  obsProc          String?
  employeesHistory EmployeeExamsHistory[]
  company          Company                @relation(fields: [companyId], references: [id])
  examToClinic     ExamToClinic[]
  examToRisk       ExamToRisk[]
  examToRiskData   ExamToRiskData[]

  @@unique([id, companyId])
  @@index([companyId])
}

model ExamToClinic {
  id              Int                     @id @default(autoincrement())
  examId          Int
  companyId       String
  dueInDays       Int?
  isScheduled     Boolean                 @default(false)
  observation     String?
  scheduleRange   Json?
  status          StatusEnum              @default(ACTIVE)
  scheduleType    ClinicScheduleTypeEnum?
  examMinDuration Int?
  price           Int?
  startDate       DateTime                @default(now())
  endDate         DateTime?
  groupId         String?                 @default(uuid())
  isAdmission     Boolean                 @default(true)
  isChange        Boolean                 @default(true)
  isDismissal     Boolean                 @default(true)
  isPeriodic      Boolean                 @default(true)
  isReturn        Boolean                 @default(true)
  company         Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  exam            Exam                    @relation(fields: [examId], references: [id])

  @@unique([examId, companyId, startDate, groupId])
}

model ExamToRisk {
  id                    Int                     @id @default(autoincrement())
  examId                Int?
  riskId                String?
  companyId             String
  deletedAt             DateTime?
  fromAge               Int?
  isAdmission           Boolean                 @default(false)
  isChange              Boolean                 @default(false)
  isDismissal           Boolean                 @default(false)
  isFemale              Boolean                 @default(false)
  isMale                Boolean                 @default(false)
  isPeriodic            Boolean                 @default(false)
  isReturn              Boolean                 @default(false)
  startDate             DateTime                @default(now())
  toAge                 Int?
  validityInMonths      Int?
  lowValidityInMonths   Int?
  minRiskDegree         Int?                    @default(1)
  minRiskDegreeQuantity Int?                    @default(1)
  considerBetweenDays   Int?
  company               Company                 @relation(fields: [companyId], references: [id])
  exam                  Exam?                   @relation(fields: [examId], references: [id])
  risk                  RiskFactors?            @relation(fields: [riskId], references: [id])
  skipCompanies         ExamToRiskSkipCompany[]

  @@unique([id, companyId])
}

model ExamToRiskSkipCompany {
  id           Int        @id @default(autoincrement())
  companyId    String
  examToRiskId Int
  ExamToRisk   ExamToRisk @relation(fields: [examToRiskId], references: [id], onDelete: Cascade)
  company      Company    @relation(fields: [companyId], references: [id])

  @@unique([examToRiskId, companyId])
}

model Alert {
  id         Int            @id @default(autoincrement())
  type       AlertsTypeEnum
  companyId  String
  system     Boolean        @default(false)
  company    Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  groups     AccessGroups[]
  users      User[]
  emails     String[]
  nextAlert  DateTime?
  configJson Json?

  @@unique([companyId, type])
  @@unique([companyId, id])
}

model ExamToRiskData {
  examId              Int
  fromAge             Int?
  isAdmission         Boolean        @default(false)
  isChange            Boolean        @default(false)
  isDismissal         Boolean        @default(false)
  isFemale            Boolean        @default(false)
  isMale              Boolean        @default(false)
  isPeriodic          Boolean        @default(false)
  isReturn            Boolean        @default(false)
  riskFactorDataId    String
  toAge               Int?
  validityInMonths    Int?
  lowValidityInMonths Int?
  considerBetweenDays Int?
  exam                Exam           @relation(fields: [examId], references: [id])
  risk                RiskFactorData @relation(fields: [riskFactorDataId], references: [id], onDelete: Cascade)

  @@id([examId, riskFactorDataId])
}

model GenerateSource {
  id             String           @id @default(uuid())
  riskId         String
  name           String
  companyId      String
  system         Boolean          @default(false)
  status         StatusEnum       @default(ACTIVE)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  deleted_at     DateTime?
  company        Company          @relation(fields: [companyId], references: [id])
  risk           RiskFactors      @relation(fields: [riskId], references: [id], onDelete: Cascade)
  recMeds        RecMed[]
  riskFactorData RiskFactorData[] @relation("GenerateSourceToRiskFactorData")

  @@unique([id, companyId])
}

model Hierarchy {
  id                            String                     @id @default(uuid())
  status                        StatusEnum                 @default(ACTIVE)
  type                          HierarchyEnum
  description                   String                     @default("")
  realDescription               String                     @default("")
  name                          String
  companyId                     String
  parentId                      String?
  refName                       String?
  created_at                    DateTime                   @default(now())
  updated_at                    DateTime                   @default(now())
  deletedAt                     DateTime?
  employees                     Employee[]
  employeeExamsHistory          EmployeeExamsHistory[] //poder ao adimitir um funcionario, escolher adicionar a este cargo 
  employeeExamsHistorySubOffice EmployeeExamsHistory[]     @relation("subOffice_employee_exam")
  hierarchyHistory              EmployeeHierarchyHistory[]
  company                       Company                    @relation(fields: [companyId], references: [id])
  parent                        Hierarchy?                 @relation("children_parent", fields: [parentId], references: [id], onDelete: Cascade)
  children                      Hierarchy[]                @relation("children_parent")
  hierarchyOnHomogeneous        HierarchyOnHomogeneous[]
  riskFactorDatas               RiskFactorData[]
  riskDocInfo                   RiskFactorsDocInfo[]
  workspaces                    Workspace[]                @relation("HierarchyToWorkspace")
  subOfficeEmployees            Employee[]                 @relation("sub_offices")
  subHierarchyHistory           EmployeeHierarchyHistory[] @relation("sub_offices_history")
  protocolsData                 ProtocolToRisk[]

  @@unique([id, companyId])
  @@unique([parentId, name])
  @@index([deletedAt])
  @@index([companyId])
}

model HierarchyOnHomogeneous {
  hierarchyId        String
  homogeneousGroupId String
  deletedAt          DateTime?
  endDate            DateTime?
  id                 Int              @id @default(autoincrement())
  startDate          DateTime?
  created_at         DateTime         @default(now())
  hierarchy          Hierarchy        @relation(fields: [hierarchyId], references: [id], onDelete: Cascade)
  homogeneousGroup   HomogeneousGroup @relation(fields: [homogeneousGroupId], references: [id], onDelete: Cascade)

  @@unique([hierarchyId, homogeneousGroupId, endDate, startDate])
  @@index([deletedAt])
  @@index([endDate])
}

model HomogeneousGroup {
  id                     String                   @id @default(uuid())
  name                   String
  description            String
  companyId              String
  status                 StatusEnum               @default(ACTIVE)
  created_at             DateTime                 @default(now())
  type                   HomoTypeEnum?
  deletedAt              DateTime?
  characterization       CompanyCharacterization?
  environment            CompanyEnvironment?
  hierarchyOnHomogeneous HierarchyOnHomogeneous[]
  company                Company                  @relation(fields: [companyId], references: [id])
  riskFactorData         RiskFactorData[]
  workspaces             Workspace[]
  protocolsData          ProtocolToRisk[]

  @@unique([name, companyId]) //if remove this will need to change company struct xml import for non unique name
  @@index([name])
  @@index([deletedAt])
  @@index([companyId])
}

model ImageGallery {
  id         Int              @id @default(autoincrement())
  types      ImagesTypeEnum[]
  companyId  String
  name       String
  search     String?
  company    Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  url        String
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@unique([companyId, id])
}

model InviteUsers {
  id           String        @id @default(uuid())
  expires_date DateTime
  companyId    String
  email        String?
  roles        String[]
  permissions  String[]
  groupId      Int?
  companiesIds String[]
  company      Company       @relation(fields: [companyId], references: [id])
  group        AccessGroups? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  professional Professional?
}

model License {
  id         Int        @id @default(autoincrement())
  companyId  String     @unique
  status     StatusEnum @default(ACTIVE)
  created_at DateTime   @default(now())
  companies  Company[]  @relation("license")

  @@index([companyId])
}

model Notification {
  id            Int       @id @default(autoincrement())
  created_at    DateTime  @default(now())
  json          Json
  repeatId      String?
  isClinic      Boolean?
  isConsulting  Boolean?
  isCompany     Boolean?
  system        Boolean?
  companyId     String
  company       Company   @relation("owner_notification_company", fields: [companyId], references: [id], onDelete: Cascade)
  companies     Company[] @relation("CompanyToNotification")
  users         User[]    @relation("NotificationToUser")
  confirmations User[]    @relation("user_notification_confirm")

  @@index([system])
  @@index([isCompany])
  @@index([isConsulting])
  @@index([companyId])
}

model Professional {
  name           String
  formation      String[]
  certifications String[]
  created_at     DateTime              @default(now())
  deleted_at     DateTime?
  updated_at     DateTime              @updatedAt
  companyId      String?
  cpf            String?
  email          String?
  phone          String?
  status         StatusEnum            @default(ACTIVE)
  type           ProfessionalTypeEnum? @default(USER)
  id             Int                   @id @default(autoincrement())
  userId         Int?                  @unique
  inviteId       String?               @unique
  company        Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invite         InviteUsers?          @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  user           User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  councils       ProfessionalCouncil[]

  @@unique([id, companyId])
}

model ProfessionalCouncil {
  id                        Int                              @id @default(autoincrement())
  councilType               String
  councilUF                 String
  councilId                 String
  created_at                DateTime                         @default(now())
  updated_at                DateTime                         @updatedAt
  professionalId            Int
  absenteeisms              Absenteeism[]
  cats                      Cat[]
  doctorCompanyResponsible  Company[]                        @relation("doctors_council_company_responsibles")
  tecCompanyResponsible     Company[]                        @relation("tec_council_company_responsibles")
  doctorGroupResponsible    CompanyGroup[]                   @relation("doctors_council_group_responsibles")
  tecGroupResponsible       CompanyGroup[]                   @relation("tec_council_group_responsibles")
  examDoctorHistory         EmployeeExamsHistory[]
  professional              Professional                     @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  professionalsResponsibles ProfessionalCouncilResponsible[]
  professionalDataSignature DocumentDataToProfessional[]
  scheduleMedicalVisits     ScheduleMedicalVisit[]

  @@unique([councilType, councilUF, councilId, professionalId])
}

model ProfessionalCouncilResponsible {
  id                    Int                      @id @default(autoincrement())
  created_at            DateTime                 @default(now())
  updated_at            DateTime                 @updatedAt
  startDate             DateTime
  professionalCouncilId Int
  companyId             String
  type                  ProfessionalRespTypeEnum @default(AMB)
  company               Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  professional          ProfessionalCouncil      @relation(fields: [professionalCouncilId], references: [id], onDelete: Cascade)

  @@unique([companyId, professionalCouncilId, startDate])
}

model Protocol {
  id             Int              @id @default(autoincrement())
  name           String
  created_at     DateTime         @default(now())
  deleted_at     DateTime?
  updated_at     DateTime         @updatedAt
  companyId      String?
  status         StatusEnum       @default(ACTIVE)
  system         Boolean?
  company        Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  protocolToRisk ProtocolToRisk[]

  @@unique([id, companyId])
}

model ProtocolToRisk {
  id                    Int                @id @default(autoincrement())
  protocolId            Int?
  riskId                String?
  companyId             String
  minRiskDegree         Int?               @default(1)
  minRiskDegreeQuantity Int?               @default(1)
  company               Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  protocol              Protocol?          @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  risk                  RiskFactors?       @relation(fields: [riskId], references: [id], onDelete: Cascade)
  hierarchies           Hierarchy[]
  homoGroups            HomogeneousGroup[]

  @@unique([id, companyId])
  @@unique([riskId, protocolId, companyId])
}

model RecMed {
  id                   String                 @id @default(uuid())
  riskId               String
  recName              String?
  medName              String?
  companyId            String
  generateSourceId     String?
  system               Boolean
  medType              MeasuresTypeEnum?
  status               StatusEnum             @default(ACTIVE)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now())
  deleted_at           DateTime?
  recType              RecTypeEnum?
  company              Company                @relation(fields: [companyId], references: [id])
  generateSource       GenerateSource?        @relation(fields: [generateSourceId], references: [id], onDelete: Cascade)
  risk                 RiskFactors            @relation(fields: [riskId], references: [id], onDelete: Cascade)
  dataRecs             RiskFactorDataRec[]
  engsToRiskFactorData EngsToRiskFactorData[]
  adms                 RiskFactorData[]       @relation("adms")
  recs                 RiskFactorData[]       @relation("recs")

  @@unique([id, companyId])
}

model RefreshToken {
  id            String   @id @default(uuid())
  refresh_token String
  expires_date  DateTime
  created_at    DateTime @default(now())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RiskFactors {
  id                    String                  @id @default(uuid())
  name                  String
  companyId             String
  severity              Int                     @default(0)
  system                Boolean                 @default(false)
  appendix              String?
  risk                  String?
  propagation           String[]
  exame                 String?
  symptoms              String?
  method                String?
  unit                  String?
  cas                   String?
  breather              String?
  nr15lt                String?
  twa                   String?
  stel                  String?
  ipvs                  String?
  pv                    String?
  pe                    String?
  carnogenicityACGIH    String?
  carnogenicityLinach   String?
  status                StatusEnum              @default(ACTIVE)
  type                  RiskFactorsEnum
  representAll          Boolean                 @default(false)
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  deleted_at            DateTime?
  isEmergency           Boolean                 @default(false)
  json                  Json?
  fraction              String?
  tlv                   String?
  isAso                 Boolean                 @default(true)
  isPCMSO               Boolean                 @default(true)
  isPGR                 Boolean                 @default(true)
  isPPP                 Boolean                 @default(true)
  esocialCode           String?
  coments               String?
  examToRisk            ExamToRisk[]
  generateSource        GenerateSource[]
  protocolToRisk        ProtocolToRisk[]
  recMed                RecMed[]
  riskFactorData        RiskFactorData[]
  riskFactorProbability RiskFactorProbability[]
  company               Company                 @relation(fields: [companyId], references: [id])
  esocial               EsocialTable24?         @relation(fields: [esocialCode], references: [id], onDelete: Restrict)
  docInfo               RiskFactorsDocInfo[]

  @@unique([id, companyId])
  @@index([name])
  @@index([esocialCode])
}

model RiskFactorsDocInfo {
  id          Int         @id @default(autoincrement())
  riskId      String
  companyId   String
  hierarchyId String?
  isAso       Boolean     @default(true)
  isPGR       Boolean     @default(true)
  isPCMSO     Boolean     @default(true)
  isPPP       Boolean     @default(true)
  created_at  DateTime    @default(now())
  company     Company     @relation(fields: [companyId], references: [id])
  hierarchy   Hierarchy?  @relation(fields: [hierarchyId], references: [id], onDelete: Cascade)
  risk        RiskFactors @relation(fields: [riskId], references: [id])

  @@unique([companyId, riskId, hierarchyId])
  @@index([companyId])
}

model RiskFactorDocument {
  id             String        @id @default(uuid())
  fileUrl        String?
  name           String
  description    String        @default("")
  version        String        @default("1.0.0")
  companyId      String
  workspaceName  String
  workspaceId    String
  status         StatusEnum    @default(ACTIVE)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  attachments    Attachments[]
  company        Company       @relation(fields: [companyId], references: [id])
  documentDataId String
  documentData   DocumentData  @relation(fields: [documentDataId, companyId], references: [id, companyId])
  workspace      Workspace     @relation(fields: [workspaceId, companyId], references: [id, companyId], onDelete: Cascade)

  approvedBy   String?
  elaboratedBy String?
  revisionBy   String?
  validity     String?

  @@unique([id, companyId])
}

model RiskFactorGroupData {
  id         String     @id @default(uuid())
  name       String?
  created_at DateTime   @default(now())
  companyId  String
  status     StatusEnum @default(PROGRESS)

  data    RiskFactorData[]
  company Company          @relation(fields: [companyId], references: [id])

  @@unique([id, companyId])
}

model DocumentDataToProfessional {
  documentDataId String              @map("B")
  professionalId Int                 @map("A")
  isSigner       Boolean             @default(false)
  isElaborator   Boolean             @default(false)
  professional   ProfessionalCouncil @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  documentData   DocumentData        @relation(fields: [documentDataId], references: [id], onDelete: Cascade)

  @@id([documentDataId, professionalId])
  @@map("_DocumentDataToProfessional")
}

model RiskFactorData {
  id                    String                 @id @default(uuid())
  probability           Int?
  probabilityAfter      Int?
  companyId             String
  riskId                String
  homogeneousGroupId    String?
  hierarchyId           String?
  riskFactorGroupDataId String
  json                  Json?
  level                 Int?
  standardExams         Boolean                @default(true)
  deletedAt             DateTime?
  endDate               DateTime?
  startDate             DateTime?
  examsToRiskFactorData ExamToRiskData[]
  company               Company                @relation(fields: [companyId], references: [id])
  hierarchy             Hierarchy?             @relation(fields: [hierarchyId], references: [id], onDelete: Cascade)
  homogeneousGroup      HomogeneousGroup?      @relation(fields: [homogeneousGroupId], references: [id], onDelete: Cascade)
  riskFactorGroupData   RiskFactorGroupData    @relation(fields: [riskFactorGroupDataId], references: [id])
  riskFactor            RiskFactors            @relation(fields: [riskId], references: [id])
  dataRecs              RiskFactorDataRec[]
  probabilityAfterCalc  RiskFactorProbability? @relation("RiskFactorProbabilityAfter")
  probabilityCalc       RiskFactorProbability? @relation("RiskFactorProbabilityBefore")
  epiToRiskFactorData   EpiToRiskFactorData[]
  engsToRiskFactorData  EngsToRiskFactorData[]
  generateSources       GenerateSource[]       @relation("GenerateSourceToRiskFactorData")
  adms                  RecMed[]               @relation("adms")
  recs                  RecMed[]               @relation("recs")

  @@unique([id, companyId])
  @@unique([id, riskId, riskFactorGroupDataId])
  @@index([riskId])
  @@index([hierarchyId])
  @@index([deletedAt])
  @@index([companyId])
}

model RiskFactorProbability {
  id                    String          @id @default(uuid())
  intensity             Int?
  intensityResult       Float?
  intensityLt           Float?
  minDurationJT         Int?
  minDurationEO         Int?
  chancesOfHappening    Int?
  frequency             Int?
  history               Int?
  medsImplemented       Int?
  riskFactorDataAfterId String?
  riskFactorDataId      String?
  riskId                String
  riskFactorGroupDataId String?
  riskFactorDataAfter   RiskFactorData? @relation("RiskFactorProbabilityAfter", fields: [riskFactorDataAfterId, riskId, riskFactorGroupDataId], references: [id, riskId, riskFactorGroupDataId])
  riskFactorData        RiskFactorData? @relation("RiskFactorProbabilityBefore", fields: [riskFactorDataId, riskId, riskFactorGroupDataId], references: [id, riskId, riskFactorGroupDataId])
  riskFactor            RiskFactors     @relation(fields: [riskId], references: [id])

  @@unique([riskFactorDataId, riskId, riskFactorGroupDataId])
  @@unique([riskFactorDataAfterId, riskId, riskFactorGroupDataId])
}

model RiskFactorDataRec {
  id               String                      @id @default(uuid())
  responsibleName  String?
  endDate          DateTime?
  status           StatusEnum                  @default(PENDING)
  recMedId         String
  riskFactorDataId String
  companyId        String
  created_at       DateTime                    @default(now())
  updated_at       DateTime                    @updatedAt
  company          Company                     @relation(fields: [companyId], references: [id])
  recMed           RecMed                      @relation(fields: [recMedId], references: [id])
  riskFactorData   RiskFactorData              @relation(fields: [riskFactorDataId], references: [id])
  comments         RiskFactorDataRecComments[]

  @@unique([riskFactorDataId, recMedId, companyId])
}

model RiskFactorDataRecComments {
  id                  String              @id @default(uuid())
  text                String
  type                RiskRecTypeEnum
  riskFactorDataRecId String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  textType            RiskRecTextTypeEnum
  riskFactorDataRec   RiskFactorDataRec   @relation(fields: [riskFactorDataRecId], references: [id])
}

model ScheduleBlock {
  id          Int                    @id @default(autoincrement())
  name        String
  description String?
  status      StatusEnum             @default(ACTIVE)
  type        ScheduleBlockTypeEnum?

  yearRecurrence Boolean @default(false)
  startDate      String?
  endDate        String?

  startTime    String?
  endTime      String?
  updated_at   DateTime  @updatedAt
  created_at   DateTime  @default(now())
  deleted_at   DateTime?
  allCompanies Boolean   @default(false)

  companyId        String
  company          Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applyOnCompanies Company[] @relation(name: "schedule_block_m2m_companies")

  @@unique([id, companyId])
  @@index([companyId])
  @@index(status)
  @@index(startDate)
  @@index(endDate)
  @@index(name)
}

model ScheduleMedicalVisit {
  id             Int        @id @default(autoincrement())
  updated_at     DateTime   @updatedAt
  created_at     DateTime   @default(now())
  status         StatusEnum @default(ACTIVE)
  doneClinicDate DateTime?
  doneLabDate    DateTime?
  companyId      String
  userId         Int
  clinicId       String?
  labId          String?
  docId          Int?

  company Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  clinic  Company?             @relation(name: "medical_visit_clinic", fields: [clinicId], references: [id], onDelete: Cascade)
  lab     Company?             @relation(name: "medical_visit_lab", fields: [labId], references: [id], onDelete: Cascade)
  doc     ProfessionalCouncil? @relation(fields: [docId], references: [id], onDelete: Restrict)

  exams EmployeeExamsHistory[]

  @@unique([id, companyId])
  @@index([companyId])
  @@index(status)
}

model User {
  id                  Int                    @id @default(autoincrement())
  email               String                 @unique
  name                String?
  password            String
  created_at          DateTime               @default(now())
  updated_at          DateTime               @updatedAt
  deleted_at          DateTime?
  cpf                 String?
  phone               String?
  photoUrl            String?
  facebookExternalId  String?
  googleExternalId    String?
  googleUser          String?
  facebookUser        String?
  esocialTransmission EmployeeESocialBatch[]
  examDone            EmployeeExamsHistory[] @relation("user_done")
  examSchedules       EmployeeExamsHistory[] @relation("user_schedule")
  professional        Professional?
  refresh_token       RefreshToken[]
  sessionHistory      UserHistory[]
  companies           UserCompany[]
  notification        Notification[]         @relation("NotificationToUser")
  notificationConfirm Notification[]         @relation("user_notification_confirm")
  alerts              Alert[]
  medicalVisits       ScheduleMedicalVisit[]

  @@unique([id, name])
  @@index([email])
}

model UserCompany {
  roles       String[]
  permissions String[]
  status      StatusEnum    @default(ACTIVE)
  userId      Int
  companyId   String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  groupId     Int?
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  group       AccessGroups? @relation(fields: [groupId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([companyId, userId])
  @@index([companyId])
}

model UserHistory {
  id         Int      @id @default(autoincrement())
  ip         String?
  city       String?
  region     String?
  country    String?
  userAgent  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId  String?
  company    Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
}

model Uf {
  code   String   @id
  uf     String   @unique
  name   String
  cat    Cat[]
  cities Cities[]
}

model Workspace {
  id                 String                    @id @default(uuid())
  name               String
  abbreviation       String?
  description        String?
  created_at         DateTime                  @default(now())
  updated_at         DateTime                  @updatedAt
  deleted_at         DateTime?
  companyId          String
  status             StatusEnum                @default(ACTIVE)
  cnpj               String?
  isOwner            Boolean                   @default(true)
  companyJson        Json?
  address            Address?
  characterization   CompanyCharacterization[]
  companyEnvironment CompanyEnvironment[]
  documents          Document[]
  riskFactorDocument RiskFactorDocument[]
  company            Company                   @relation(fields: [companyId], references: [id])
  hierarchy          Hierarchy[]               @relation("HierarchyToWorkspace")
  homogeneousGroup   HomogeneousGroup[]
  documentData       DocumentData[]

  @@unique([abbreviation, companyId])
  @@unique([id, companyId])
  @@index([companyId])
}

enum CharacterizationTypeEnum {
  WORKSTATION
  EQUIPMENT
  ACTIVITIES
  GENERAL
  SUPPORT
  OPERATION
  ADMINISTRATIVE
}

enum ClinicScheduleTypeEnum {
  PHONE
  EMAIL
  ONLINE
  ASK
  NONE
}

enum CompanyPaymentTypeEnum {
  ANTICIPATED
  DEBIT
}

enum CompanyTypesEnum {
  MATRIZ
  FILIAL
  MASTER
}

enum CompanyEnvironmentTypesEnum {
  SUPPORT
  OPERATION
  ADMINISTRATIVE
  GENERAL
}

enum CoverTypeEnum {
  PGR
  PCSMO
}

enum DateUnitEnum {
  DAY
  HOUR
  MINUTE
}

enum DocumentTypeEnum {
  PGR
  PCSMO
  OTHER
}

enum ExamTypeEnum {
  LAB
  AUDIO
  VISUAL
  OTHERS
}

enum EmployeeHierarchyMotiveTypeEnum {
  ADM
  TRANS
  ALOC
  PROM
  TRANS_PROM
  DEM
  SUB_OFFICE
}

enum EmployeeESocialRefTypeEnum {
  CAT
  EXAM
  HIERARCHY
  HOMO_GROUP
  RISK_DATA
  SUB_OFFICE
}

enum EmployeeESocialEventTypeEnum {
  CAT_2210
  EXAM_2220
  RISK_2240
}

enum EmployeeESocialEventActionEnum {
  SEND
  EXCLUDE
  MODIFY
}

enum ExamHistoryTypeEnum {
  ADMI
  PERI
  RETU
  CHAN
  EVAL
  DEMI
  OFFI
}

enum ExamHistoryEvaluationEnum {
  NONE
  APTO
  INAPT
  INCONCLUSIVE
}

enum ExamHistoryConclusionEnum {
  NORMAL
  ALTER
  ALTER_1
  ALTER_2
  ALTER_3
  NONE
}

enum HierarchyEnum {
  DIRECTORY
  MANAGEMENT
  SECTOR
  SUB_SECTOR
  OFFICE
  SUB_OFFICE
}

enum HomoTypeEnum {
  HIERARCHY
  ENVIRONMENT
  WORKSTATION
  EQUIPMENT
  ACTIVITIES
}

enum MeasuresTypeEnum {
  ADM
  ENG
}

enum ScheduleBlockTypeEnum {
  NAT_HOLIDAY
  MUN_HOLIDAY
  ST_HOLIDAY
  OTHER
}

enum SexTypeEnum {
  M
  F
}

enum StatusEnum {
  ACTIVE
  PROGRESS
  INACTIVE
  PENDING
  CANCELED
  PROCESSING
  EXPIRED
  VALID
  INVALID
  ERROR
  DONE
  MODIFIED
  TRANSMITTED
}

enum RecTypeEnum {
  ADM
  ENG
  EPI
}

enum RiskFactorsEnum {
  BIO
  QUI
  FIS
  ERG
  ACI
  OUTROS
}

enum RiskRecTypeEnum {
  CANCELED
  POSTPONED
  DONE
}

enum RiskRecTextTypeEnum {
  MONEY
  TECHNIQUE
  LOGISTICS
  OTHER
}

enum UfStateEnum {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum ProfessionalTypeEnum {
  DOCTOR
  NURSE
  SPEECH_THERAPIST
  TECHNICIAN
  ENGINEER
  USER
  OTHER
}

enum ProfessionalRespTypeEnum {
  AMB
  BIO
}

enum AlertsTypeEnum {
  CLINIC_NEXT_DAY_SCHEDULE
  COMPANY_EXPIRED_EXAM
}

enum ImagesTypeEnum {
  PGR
  PCMSO
  OTHERS
  DOCS
  CHAR
  ENV
  WORK
  EQUI
  ACTIV
  COMPANY
}
