generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum RiskFactorsEnum {
  BIO 
  QUI
  FIS
  ERG
  ACI
}

enum StatusEnum {
  ACTIVE
  PROGRESS
  INACTIVE
  PENDING
  CANCELED
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  refresh_token RefreshToken[]
  companies UserCompany[]
}

model UserCompany {
  roles String[]
  permissions String[]
  status StatusEnum @default(ACTIVE)
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  
  @@id([companyId, userId])
}

model RefreshToken {
  id   String @id @default(uuid())
  refresh_token String
  expires_date DateTime
  created_at DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model InviteUsers {
  id   String @id @default(uuid())
  expires_date DateTime
  companyId String
  email String 
  roles String[]
  permissions String[]
}

model Company {
  id   String    @id @default(uuid())
  cnpj String
  name String  
  fantasy String
  status StatusEnum @default(ACTIVE)
  type String
  isConsulting Boolean @default(false)
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  users UserCompany[]
  workspace Workspace[]
  primary_activity Activity[] @relation(name: "primary_activity")
  secondary_activity Activity[] @relation(name: "secondary_activity")
  employees Employee[] 
  receivingServiceContracts Contract[]
  applyingServiceContracts Contract[]  @relation(name: "contracts")
  licenseId Int? 
  license License? @relation(name:"license",fields: [licenseId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  riskFactors RiskFactors[] 
  recMed RecMed[] 
  checklist Checklist[] 
}

model Contract {
  receivingServiceCompany   Company @relation(fields: [receivingServiceCompanyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  applyingServiceCompany  Company @relation(name: "contracts", fields: [applyingServiceCompanyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  applyingServiceCompanyId String 
  receivingServiceCompanyId String 
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
 
  @@id([applyingServiceCompanyId, receivingServiceCompanyId])
}

model License {
  id    Int     @default(autoincrement()) @id
  companies   Company[] @relation(name:"license")
  companyId String  @unique
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())

  @@index(companyId)
}
 
model Activity {
  id    Int     @default(autoincrement()) @id
  code String @unique
  name String
  created_at DateTime @default(now())
  company_primary_activity Company[] @relation(name: "primary_activity")
  company_secondary_activity Company[] @relation(name: "secondary_activity")
} 

model Workspace {
  id    Int     @default(autoincrement()) @id
  name String  
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  address Address?
}

model Address {
  id    Int     @default(autoincrement()) @id
  cep String 
  street String?
  number String?
  complement String?
  neighborhood String?
  city String
  state String
  workspaceId Int
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Employee {
  id    Int     @default(autoincrement()) @id
  status StatusEnum @default(ACTIVE)
  name String 
  cpf Int 
  created_at DateTime @default(now())
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
} 

model RiskFactors {
  id    Int     @default(autoincrement()) @id
  name String 
  companyId String
  system Boolean
  appendix String
  propagation String[]
  status StatusEnum @default(ACTIVE)
  type RiskFactorsEnum
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime @default(now())
  recMed RecMed[]
} 

model RecMed {
  id    Int     @default(autoincrement()) @id
  riskId    Int    
  recName String 
  medName String 
  companyId String
  system Boolean
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  risk RiskFactors @relation(fields: [riskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
} 

model Checklist {
  id    Int     @default(autoincrement()) @id
  status StatusEnum @default(PROGRESS)
  name String 
  companyId String
  system Boolean
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  data ChecklistData?
  created_at DateTime @default(now())
} 

model ChecklistData {
  json Json
  checklistId    Int  
  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
} 