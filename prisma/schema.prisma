generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyTypesEnum {
  MATRIZ
  FILIAL
  MASTER
}

enum HierarchyEnum {
  DIRECTORY 
  MANAGEMENT
  SECTOR
  SUB_SECTOR
  OFFICE
  SUB_OFFICE
}

enum RiskFactorsEnum {
  BIO 
  QUI
  FIS
  ERG
  ACI
}

enum StatusEnum {
  ACTIVE
  PROGRESS
  INACTIVE
  PENDING
  CANCELED
}


 
model Activity {
  id    Int     @default(autoincrement()) @id
  code String @unique
  name String
  created_at DateTime @default(now())
  company_primary_activity Company[] @relation(name: "primary_activity")
  company_secondary_activity Company[] @relation(name: "secondary_activity")
}

model Address {
  cep String 
  street String?
  number String?
  complement String?
  neighborhood String?
  city String?
  state String?
  workspaceId String
  companyId String
  workspace Workspace @relation(fields: [workspaceId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)
  
  @@id([workspaceId, companyId])
}


model Checklist {
  id    Int     @default(autoincrement())
  status StatusEnum @default(PROGRESS)
  name String 
  companyId String
  system Boolean
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  data ChecklistData?
  created_at DateTime @default(now())

  @@id([id, companyId])
} 

model ChecklistData {
  json Json
  companyId String
  checklistId    Int  
  checklist Checklist @relation(fields: [checklistId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)

  @@id([checklistId, companyId])
} 

model Company {
  id   String    @id @default(uuid())
  cnpj String
  name String  
  fantasy String
  status StatusEnum @default(ACTIVE)
  type CompanyTypesEnum @default(MATRIZ)
  isConsulting Boolean @default(false)
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  users UserCompany[]
  workspace Workspace[]
  primary_activity Activity[] @relation(name: "primary_activity")
  secondary_activity Activity[] @relation(name: "secondary_activity")
  employees Employee[] 
  receivingServiceContracts Contract[]
  applyingServiceContracts Contract[]  @relation(name: "contracts")
  licenseId Int? 
  license License? @relation(name:"license",fields: [licenseId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  riskFactors RiskFactors[] 
  homogeneousGroup HomogeneousGroup[] 
  generateSource GenerateSource[] 
  recMed RecMed[] 
  hierarchy Hierarchy[] 
  databaseTable DatabaseTable[] 
  checklist Checklist[] 
}

model Contract {
  receivingServiceCompany   Company @relation(fields: [receivingServiceCompanyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  applyingServiceCompany  Company @relation(name: "contracts", fields: [applyingServiceCompanyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  applyingServiceCompanyId String 
  receivingServiceCompanyId String 
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
 
  @@id([applyingServiceCompanyId, receivingServiceCompanyId])
}

model DatabaseTable {
  id    Int     @default(autoincrement())
  name String 
  version Int  @default(1)
  companyId String
  system Boolean
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt

  @@id([id, companyId])
} 

model Employee {
  id    Int     @default(autoincrement())
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  status StatusEnum @default(ACTIVE)
  name String 
  cpf String 
  companyId String
  workplaceId String
  hierarchyId String
  workplace Workspace @relation(fields: [workplaceId, companyId], references: [id, companyId], onDelete: Restrict, onUpdate: Cascade)
  hierarchy Hierarchy @relation(fields: [hierarchyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  
  @@id([id, companyId])
} 


model Epi {
  id    Int     @default(autoincrement()) @id
  ca String
  isValid Boolean?  
  expiredDate DateTime?
  desc String @default("")
  equipment String @default("")
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())

  @@index(ca)
  @@unique([ca, status])
} 


model GenerateSource {
  id    String     @default(uuid())
  riskId    String    
  name String
  companyId String
  system Boolean
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  risk RiskFactors @relation(fields: [riskId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)
  recMeds RecMed[] 
  created_at DateTime @default(now())

  @@id([id, companyId])
} 

model Hierarchy {
  id    String     @default(uuid())  @id
  created_at DateTime @default(now())
  status StatusEnum @default(ACTIVE)
  type HierarchyEnum 
  description String @default("")
  name String   
  companyId String
  parentId  String?
  workplaceId String
  workplace Workspace @relation(fields: [workplaceId, companyId], references: [id, companyId], onDelete: Restrict, onUpdate: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  parent Hierarchy?  @relation(name: "children_parent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children Hierarchy[] @relation(name: "children_parent")
  employee Employee[] 
  homogeneousGroup HomogeneousGroup[]

  @@index(companyId)
}

model HomogeneousGroup {
  id    String     @default(uuid()) @id
  name String
  description String @default("") //! remove default
  companyId String
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  hierarchies Hierarchy[] 
  created_at DateTime @default(now())
  
  @@index(companyId)
}

model InviteUsers {
  id   String @id @default(uuid())
  expires_date DateTime
  companyId String
  email String 
  roles String[]
  permissions String[]
}

model License {
  id    Int     @default(autoincrement()) @id
  companies   Company[] @relation(name:"license")
  companyId String  @unique
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())

  @@index(companyId)
}

model RecMed {
  id    String     @default(uuid())
  riskId    String    
  recName String? 
  medName String? 
  companyId String
  generateSourceId    String?    
  system Boolean
  status StatusEnum @default(ACTIVE)
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  risk RiskFactors @relation(fields: [riskId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)
  generateSource GenerateSource? @relation(fields: [generateSourceId,companyId], references: [id,companyId], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())

  @@id([id, companyId])
} 

model RefreshToken {
  id   String @id @default(uuid())
  refresh_token String
  expires_date DateTime
  created_at DateTime @default(now())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RiskFactors {
  id    String     @default(uuid())
  name String 
  companyId String
  severity Int 
  system Boolean
  appendix String? 
  propagation String[] 
  status StatusEnum @default(ACTIVE)
  type RiskFactorsEnum
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime @default(now())
  recMed RecMed[]
  generateSource GenerateSource[]
  representAll Boolean @default(false)
  
  @@id([id, companyId])
} 

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  refresh_token RefreshToken[]
  companies UserCompany[]
}

model UserCompany {
  roles String[]
  permissions String[]
  status StatusEnum @default(ACTIVE)
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  
  @@id([companyId, userId])
}

model Workspace {
  id    String     @default(uuid()) 
  name String  
  status StatusEnum @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  companyId String
  company Company @relation(fields: [companyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  address Address?
  employee Employee[]
  hierarchy Hierarchy[]

  @@id([id, companyId])
}


